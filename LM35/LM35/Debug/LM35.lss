
LM35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000009b4  00000a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800112  00800112  00000a5a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098d  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000458  00000000  00000000  0000153d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d4  00000000  00000000  00001995  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00001d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ec  00000000  00000000  00001f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000035b  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000254b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <main>
  9e:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_LCD_OutNibble>:
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{

if(nibbleToWrite & 0x01)
  a6:	80 ff       	sbrs	r24, 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <_LCD_OutNibble+0x8>
	LCD_DB4_PORT |= LCD_DB4;
  aa:	41 9a       	sbi	0x08, 1	; 8
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <_LCD_OutNibble+0xa>
else
	LCD_DB4_PORT  &= ~LCD_DB4;
  ae:	41 98       	cbi	0x08, 1	; 8

if(nibbleToWrite & 0x02)
  b0:	81 ff       	sbrs	r24, 1
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <_LCD_OutNibble+0x12>
	LCD_DB5_PORT |= LCD_DB5;
  b4:	42 9a       	sbi	0x08, 2	; 8
  b6:	01 c0       	rjmp	.+2      	; 0xba <_LCD_OutNibble+0x14>
else
	LCD_DB5_PORT  &= ~LCD_DB5;
  b8:	42 98       	cbi	0x08, 2	; 8

if(nibbleToWrite & 0x04)
  ba:	82 ff       	sbrs	r24, 2
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <_LCD_OutNibble+0x1c>
	LCD_DB6_PORT |= LCD_DB6;
  be:	43 9a       	sbi	0x08, 3	; 8
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <_LCD_OutNibble+0x1e>
else
	LCD_DB6_PORT  &= ~LCD_DB6;
  c2:	43 98       	cbi	0x08, 3	; 8

if(nibbleToWrite & 0x08)
  c4:	83 ff       	sbrs	r24, 3
  c6:	02 c0       	rjmp	.+4      	; 0xcc <_LCD_OutNibble+0x26>
	LCD_DB7_PORT |= LCD_DB7;
  c8:	44 9a       	sbi	0x08, 4	; 8
  ca:	08 95       	ret
else
	LCD_DB7_PORT  &= ~LCD_DB7;
  cc:	44 98       	cbi	0x08, 4	; 8
  ce:	08 95       	ret

000000d0 <_LCD_InNibble>:
//-------------------------------------------------------------------------------------------------
unsigned char _LCD_InNibble(void)
{
unsigned char tmp = 0;

if(LCD_DB4_PIN & LCD_DB4)
  d0:	86 b1       	in	r24, 0x06	; 6
  d2:	86 95       	lsr	r24
  d4:	81 70       	andi	r24, 0x01	; 1
	tmp |= (1 << 0);
if(LCD_DB5_PIN & LCD_DB5)
  d6:	32 99       	sbic	0x06, 2	; 6
	tmp |= (1 << 1);
  d8:	82 60       	ori	r24, 0x02	; 2
if(LCD_DB6_PIN & LCD_DB6)
  da:	33 99       	sbic	0x06, 3	; 6
	tmp |= (1 << 2);
  dc:	84 60       	ori	r24, 0x04	; 4
if(LCD_DB7_PIN & LCD_DB7)
  de:	34 99       	sbic	0x06, 4	; 6
	tmp |= (1 << 3);
  e0:	88 60       	ori	r24, 0x08	; 8
return tmp;
}
  e2:	08 95       	ret

000000e4 <_LCD_Read>:
// Funkcja odczytu bajtu z wyœwietacza (bez rozró¿nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------

unsigned char _LCD_Read(void)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
unsigned char tmp = 0;
LCD_DB4_DIR &= ~LCD_DB4;
  e8:	39 98       	cbi	0x07, 1	; 7
LCD_DB5_DIR &= ~LCD_DB5;
  ea:	3a 98       	cbi	0x07, 2	; 7
LCD_DB6_DIR &= ~LCD_DB6;
  ec:	3b 98       	cbi	0x07, 3	; 7
LCD_DB7_DIR &= ~LCD_DB7;
  ee:	3c 98       	cbi	0x07, 4	; 7

LCD_RW_PORT |= LCD_RW;
  f0:	5e 9a       	sbi	0x0b, 6	; 11
LCD_E_PORT |= LCD_E;
  f2:	5d 9a       	sbi	0x0b, 5	; 11
tmp |= (_LCD_InNibble() << 4);
  f4:	0e 94 68 00 	call	0xd0	; 0xd0 <_LCD_InNibble>
  f8:	90 e1       	ldi	r25, 0x10	; 16
  fa:	89 9f       	mul	r24, r25
  fc:	e0 01       	movw	r28, r0
  fe:	11 24       	eor	r1, r1
LCD_E_PORT &= ~LCD_E;
 100:	5d 98       	cbi	0x0b, 5	; 11
LCD_E_PORT |= LCD_E;
 102:	5d 9a       	sbi	0x0b, 5	; 11
tmp |= _LCD_InNibble();
 104:	0e 94 68 00 	call	0xd0	; 0xd0 <_LCD_InNibble>
LCD_E_PORT &= ~LCD_E;
 108:	5d 98       	cbi	0x0b, 5	; 11
return tmp;
}
 10a:	8c 2b       	or	r24, r28
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <LCD_ReadStatus>:
// Funkcja odczytu bajtu statusowego
//
//-------------------------------------------------------------------------------------------------
unsigned char LCD_ReadStatus(void)
{
LCD_RS_PORT &= ~LCD_RS;
 112:	5c 98       	cbi	0x0b, 4	; 11
return _LCD_Read();
 114:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_LCD_Read>

00000118 <_LCD_Write>:
//
// Funkcja zapisu bajtu do wyœwietacza (bez rozró¿nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
 118:	cf 93       	push	r28
 11a:	c8 2f       	mov	r28, r24
LCD_DB4_DIR |= LCD_DB4;
 11c:	39 9a       	sbi	0x07, 1	; 7
LCD_DB5_DIR |= LCD_DB5;
 11e:	3a 9a       	sbi	0x07, 2	; 7
LCD_DB6_DIR |= LCD_DB6;
 120:	3b 9a       	sbi	0x07, 3	; 7
LCD_DB7_DIR |= LCD_DB7;
 122:	3c 9a       	sbi	0x07, 4	; 7

LCD_RW_PORT &= ~LCD_RW;
 124:	5e 98       	cbi	0x0b, 6	; 11
LCD_E_PORT |= LCD_E;
 126:	5d 9a       	sbi	0x0b, 5	; 11
_LCD_OutNibble(dataToWrite >> 4);
 128:	82 95       	swap	r24
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	0e 94 53 00 	call	0xa6	; 0xa6 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
 130:	5d 98       	cbi	0x0b, 5	; 11
LCD_E_PORT |= LCD_E;
 132:	5d 9a       	sbi	0x0b, 5	; 11
_LCD_OutNibble(dataToWrite);
 134:	8c 2f       	mov	r24, r28
 136:	0e 94 53 00 	call	0xa6	; 0xa6 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
 13a:	5d 98       	cbi	0x0b, 5	; 11
while(LCD_ReadStatus()&0x80);
 13c:	0e 94 89 00 	call	0x112	; 0x112 <LCD_ReadStatus>
 140:	87 fd       	sbrc	r24, 7
 142:	fc cf       	rjmp	.-8      	; 0x13c <_LCD_Write+0x24>
}
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <LCD_WriteCommand>:
// Funkcja zapisu rozkazu do wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
 148:	5c 98       	cbi	0x0b, 4	; 11
_LCD_Write(commandToWrite);
 14a:	0c 94 8c 00 	jmp	0x118	; 0x118 <_LCD_Write>

0000014e <LCD_WriteData>:
// Funkcja zapisu danych do pamiêci wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
LCD_RS_PORT |= LCD_RS;
 14e:	5c 9a       	sbi	0x0b, 4	; 11
_LCD_Write(dataToWrite);
 150:	0c 94 8c 00 	jmp	0x118	; 0x118 <_LCD_Write>

00000154 <LCD_WriteText>:
//
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24
while(*text)
 15a:	89 91       	ld	r24, Y+
 15c:	88 23       	and	r24, r24
 15e:	19 f0       	breq	.+6      	; 0x166 <LCD_WriteText+0x12>
  LCD_WriteData(*text++);
 160:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_WriteData>
 164:	fa cf       	rjmp	.-12     	; 0x15a <LCD_WriteText+0x6>
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <LCD_GoTo>:
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 16c:	90 e4       	ldi	r25, 0x40	; 64
 16e:	69 9f       	mul	r22, r25
 170:	80 0d       	add	r24, r0
 172:	11 24       	eor	r1, r1
 174:	80 68       	ori	r24, 0x80	; 128
 176:	0c 94 a4 00 	jmp	0x148	; 0x148 <LCD_WriteCommand>

0000017a <LCD_Clear>:
// Funkcja czyszczenia ekranu wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Clear(void)
{
LCD_WriteCommand(HD44780_CLEAR);
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_WriteCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	8f e3       	ldi	r24, 0x3F	; 63
 182:	9f e1       	ldi	r25, 0x1F	; 31
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_Clear+0xa>
 188:	00 c0       	rjmp	.+0      	; 0x18a <LCD_Clear+0x10>
 18a:	00 00       	nop
 18c:	08 95       	ret

0000018e <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 18e:	cf 93       	push	r28
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
 190:	39 9a       	sbi	0x07, 1	; 7
LCD_DB5_DIR |= LCD_DB5; //
 192:	3a 9a       	sbi	0x07, 2	; 7
LCD_DB6_DIR |= LCD_DB6; //
 194:	3b 9a       	sbi	0x07, 3	; 7
LCD_DB7_DIR |= LCD_DB7; //
 196:	3c 9a       	sbi	0x07, 4	; 7
LCD_E_DIR 	|= LCD_E;   //
 198:	55 9a       	sbi	0x0a, 5	; 10
LCD_RS_DIR 	|= LCD_RS;  //
 19a:	54 9a       	sbi	0x0a, 4	; 10
LCD_RW_DIR 	|= LCD_RW;  //
 19c:	56 9a       	sbi	0x0a, 6	; 10
 19e:	8f e5       	ldi	r24, 0x5F	; 95
 1a0:	9a ee       	ldi	r25, 0xEA	; 234
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_Initalize+0x14>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_Initalize+0x1a>
 1a8:	00 00       	nop
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 1aa:	5c 98       	cbi	0x0b, 4	; 11
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 1ac:	5d 98       	cbi	0x0b, 5	; 11
LCD_RW_PORT &= ~LCD_RW;
 1ae:	5e 98       	cbi	0x0b, 6	; 11
 1b0:	c3 e0       	ldi	r28, 0x03	; 3
for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
  {
  LCD_E_PORT |= LCD_E; //  E = 1
 1b2:	5d 9a       	sbi	0x0b, 5	; 11
  _LCD_OutNibble(0x03); // tryb 8-bitowy
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	0e 94 53 00 	call	0xa6	; 0xa6 <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
 1ba:	5d 98       	cbi	0x0b, 5	; 11
 1bc:	8f e1       	ldi	r24, 0x1F	; 31
 1be:	9e e4       	ldi	r25, 0x4E	; 78
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_Initalize+0x32>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD_Initalize+0x38>
 1c6:	00 00       	nop
 1c8:	c1 50       	subi	r28, 0x01	; 1
LCD_RW_DIR 	|= LCD_RW;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
LCD_RW_PORT &= ~LCD_RW;
for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 1ca:	99 f7       	brne	.-26     	; 0x1b2 <LCD_Initalize+0x24>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
 1cc:	5d 9a       	sbi	0x0b, 5	; 11
_LCD_OutNibble(0x02); // tryb 4-bitowy
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	0e 94 53 00 	call	0xa6	; 0xa6 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
 1d4:	5d 98       	cbi	0x0b, 5	; 11
 1d6:	8f e9       	ldi	r24, 0x9F	; 159
 1d8:	9f e0       	ldi	r25, 0x0F	; 15
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <LCD_Initalize+0x4c>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <LCD_Initalize+0x52>
 1e0:	00 00       	nop

_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 1e2:	88 e2       	ldi	r24, 0x28	; 40
 1e4:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
 1e8:	88 e0       	ldi	r24, 0x08	; 8
 1ea:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 1f4:	86 e0       	ldi	r24, 0x06	; 6
 1f6:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 1fa:	8c e0       	ldi	r24, 0x0C	; 12
}
 1fc:	cf 91       	pop	r28
_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 1fe:	0c 94 a4 00 	jmp	0x148	; 0x148 <LCD_WriteCommand>

00000202 <__vector_21>:
#define NOOFSAMPLES	128

volatile uint32_t ADCVal;

ISR(ADC_vect)
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	2f 93       	push	r18
 20e:	3f 93       	push	r19
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
	static uint32_t ADCaccum;
	static uint8_t sampleno;

	ADCaccum+=ADC;
 218:	20 91 78 00 	lds	r18, 0x0078
 21c:	30 91 79 00 	lds	r19, 0x0079
 220:	80 91 13 01 	lds	r24, 0x0113
 224:	90 91 14 01 	lds	r25, 0x0114
 228:	a0 91 15 01 	lds	r26, 0x0115
 22c:	b0 91 16 01 	lds	r27, 0x0116
 230:	82 0f       	add	r24, r18
 232:	93 1f       	adc	r25, r19
 234:	a1 1d       	adc	r26, r1
 236:	b1 1d       	adc	r27, r1
 238:	80 93 13 01 	sts	0x0113, r24
 23c:	90 93 14 01 	sts	0x0114, r25
 240:	a0 93 15 01 	sts	0x0115, r26
 244:	b0 93 16 01 	sts	0x0116, r27
	sampleno++;
 248:	20 91 12 01 	lds	r18, 0x0112
 24c:	2f 5f       	subi	r18, 0xFF	; 255
 24e:	20 93 12 01 	sts	0x0112, r18
	if(sampleno==NOOFSAMPLES)
 252:	20 38       	cpi	r18, 0x80	; 128
 254:	91 f4       	brne	.+36     	; 0x27a <__vector_21+0x78>
	{
		ADCVal=ADCaccum;
 256:	80 93 17 01 	sts	0x0117, r24
 25a:	90 93 18 01 	sts	0x0118, r25
 25e:	a0 93 19 01 	sts	0x0119, r26
 262:	b0 93 1a 01 	sts	0x011A, r27
		ADCaccum=0;
 266:	10 92 13 01 	sts	0x0113, r1
 26a:	10 92 14 01 	sts	0x0114, r1
 26e:	10 92 15 01 	sts	0x0115, r1
 272:	10 92 16 01 	sts	0x0116, r1
		sampleno=0;
 276:	10 92 12 01 	sts	0x0112, r1
	}
}
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	3f 91       	pop	r19
 284:	2f 91       	pop	r18
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <ADC_init>:

void ADC_init()
{
	ADMUX=(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0);  // wybór kana³u ADC0
 290:	ec e7       	ldi	r30, 0x7C	; 124
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	10 82       	st	Z, r1
	

	ADMUX |= (1 << REFS0);  // ustaw zewnetrzne napiecie
 296:	80 81       	ld	r24, Z
 298:	80 64       	ori	r24, 0x40	; 64
 29a:	80 83       	st	Z, r24
	ADMUX &= ~(0 << REFS1); // odniesienia na AVCC
 29c:	80 81       	ld	r24, Z
 29e:	80 83       	st	Z, r24

	ADCSRA=(1<<ADEN)			 //ustawienie bity ADEN=1 - wlaczenie
 2a0:	87 e8       	ldi	r24, 0x87	; 135
 2a2:	80 93 7a 00 	sts	0x007A, r24
 2a6:	08 95       	ret

000002a8 <GetTemperature>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2a8:	f8 94       	cli
uint16_t GetTemperature()
{
	uint32_t adc;
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		adc=ADCVal;
 2aa:	20 91 17 01 	lds	r18, 0x0117
 2ae:	30 91 18 01 	lds	r19, 0x0118
 2b2:	40 91 19 01 	lds	r20, 0x0119
 2b6:	50 91 1a 01 	lds	r21, 0x011A
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 2ba:	78 94       	sei
	}

	return (adc*11000UL)/(1024UL*NOOFSAMPLES);
 2bc:	a8 ef       	ldi	r26, 0xF8	; 248
 2be:	ba e2       	ldi	r27, 0x2A	; 42
 2c0:	0e 94 cb 01 	call	0x396	; 0x396 <__muluhisi3>
 2c4:	dc 01       	movw	r26, r24
 2c6:	cb 01       	movw	r24, r22
 2c8:	21 e1       	ldi	r18, 0x11	; 17
 2ca:	b6 95       	lsr	r27
 2cc:	a7 95       	ror	r26
 2ce:	97 95       	ror	r25
 2d0:	87 95       	ror	r24
 2d2:	2a 95       	dec	r18
 2d4:	d1 f7       	brne	.-12     	; 0x2ca <GetTemperature+0x22>
}
 2d6:	08 95       	ret

000002d8 <main>:

int main()
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
 2e0:	27 97       	sbiw	r28, 0x07	; 7
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	cd bf       	out	0x3d, r28	; 61
	char wynik[7];

	LCD_Initalize();
 2ec:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_Initalize>
	ADC_init();
 2f0:	0e 94 48 01 	call	0x290	; 0x290 <ADC_init>
	LCD_Clear();
 2f4:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_Clear>
	LCD_GoTo(0,0);
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_GoTo>

	LCD_WriteText("Temperatura:");
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_WriteText>
	while(1)
	{
		sprintf(wynik, "%5d", GetTemperature());
 30c:	8d e0       	ldi	r24, 0x0D	; 13
 30e:	e8 2e       	mov	r14, r24
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	f8 2e       	mov	r15, r24
 314:	8e 01       	movw	r16, r28
 316:	0f 5f       	subi	r16, 0xFF	; 255
 318:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t len=strlen(wynik);
		memmove(&wynik[len-1], &wynik[len-2], 3);
		wynik[len-2]=',';
 31a:	9c e2       	ldi	r25, 0x2C	; 44
 31c:	b9 2e       	mov	r11, r25
	LCD_GoTo(0,0);

	LCD_WriteText("Temperatura:");
	while(1)
	{
		sprintf(wynik, "%5d", GetTemperature());
 31e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <GetTemperature>
 322:	9f 93       	push	r25
 324:	8f 93       	push	r24
 326:	ff 92       	push	r15
 328:	ef 92       	push	r14
 32a:	1f 93       	push	r17
 32c:	0f 93       	push	r16
 32e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <sprintf>
		uint8_t len=strlen(wynik);
 332:	f8 01       	movw	r30, r16
 334:	01 90       	ld	r0, Z+
 336:	00 20       	and	r0, r0
 338:	e9 f7       	brne	.-6      	; 0x334 <main+0x5c>
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	e0 1b       	sub	r30, r16
 33e:	f1 0b       	sbc	r31, r17
 340:	ff 27       	eor	r31, r31
		memmove(&wynik[len-1], &wynik[len-2], 3);
 342:	6f 01       	movw	r12, r30
 344:	22 e0       	ldi	r18, 0x02	; 2
 346:	c2 1a       	sub	r12, r18
 348:	d1 08       	sbc	r13, r1
 34a:	c0 0e       	add	r12, r16
 34c:	d1 1e       	adc	r13, r17
 34e:	cf 01       	movw	r24, r30
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	43 e0       	ldi	r20, 0x03	; 3
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	b6 01       	movw	r22, r12
 358:	80 0f       	add	r24, r16
 35a:	91 1f       	adc	r25, r17
 35c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <memmove>
		wynik[len-2]=',';
 360:	f6 01       	movw	r30, r12
 362:	b0 82       	st	Z, r11
		LCD_GoTo(0, 10);
 364:	6a e0       	ldi	r22, 0x0A	; 10
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_GoTo>
		LCD_WriteText(wynik);
 370:	c8 01       	movw	r24, r16
 372:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_WriteText>
 376:	ff ef       	ldi	r31, 0xFF	; 255
 378:	29 e6       	ldi	r18, 0x69	; 105
 37a:	88 e1       	ldi	r24, 0x18	; 24
 37c:	f1 50       	subi	r31, 0x01	; 1
 37e:	20 40       	sbci	r18, 0x00	; 0
 380:	80 40       	sbci	r24, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <main+0xa4>
 384:	00 c0       	rjmp	.+0      	; 0x386 <main+0xae>
 386:	00 00       	nop
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	c4 cf       	rjmp	.-120    	; 0x31e <main+0x46>

00000396 <__muluhisi3>:
 396:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__umulhisi3>
 39a:	a5 9f       	mul	r26, r21
 39c:	90 0d       	add	r25, r0
 39e:	b4 9f       	mul	r27, r20
 3a0:	90 0d       	add	r25, r0
 3a2:	a4 9f       	mul	r26, r20
 3a4:	80 0d       	add	r24, r0
 3a6:	91 1d       	adc	r25, r1
 3a8:	11 24       	eor	r1, r1
 3aa:	08 95       	ret

000003ac <__umulhisi3>:
 3ac:	a2 9f       	mul	r26, r18
 3ae:	b0 01       	movw	r22, r0
 3b0:	b3 9f       	mul	r27, r19
 3b2:	c0 01       	movw	r24, r0
 3b4:	a3 9f       	mul	r26, r19
 3b6:	70 0d       	add	r23, r0
 3b8:	81 1d       	adc	r24, r1
 3ba:	11 24       	eor	r1, r1
 3bc:	91 1d       	adc	r25, r1
 3be:	b2 9f       	mul	r27, r18
 3c0:	70 0d       	add	r23, r0
 3c2:	81 1d       	adc	r24, r1
 3c4:	11 24       	eor	r1, r1
 3c6:	91 1d       	adc	r25, r1
 3c8:	08 95       	ret

000003ca <memmove>:
 3ca:	68 17       	cp	r22, r24
 3cc:	79 07       	cpc	r23, r25
 3ce:	68 f4       	brcc	.+26     	; 0x3ea <memmove+0x20>
 3d0:	fb 01       	movw	r30, r22
 3d2:	dc 01       	movw	r26, r24
 3d4:	e4 0f       	add	r30, r20
 3d6:	f5 1f       	adc	r31, r21
 3d8:	a4 0f       	add	r26, r20
 3da:	b5 1f       	adc	r27, r21
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <memmove+0x18>
 3de:	02 90       	ld	r0, -Z
 3e0:	0e 92       	st	-X, r0
 3e2:	41 50       	subi	r20, 0x01	; 1
 3e4:	50 40       	sbci	r21, 0x00	; 0
 3e6:	d8 f7       	brcc	.-10     	; 0x3de <memmove+0x14>
 3e8:	08 95       	ret
 3ea:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <memcpy>

000003ee <sprintf>:
 3ee:	ae e0       	ldi	r26, 0x0E	; 14
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	ed ef       	ldi	r30, 0xFD	; 253
 3f4:	f1 e0       	ldi	r31, 0x01	; 1
 3f6:	0c 94 af 04 	jmp	0x95e	; 0x95e <__prologue_saves__+0x1c>
 3fa:	0d 89       	ldd	r16, Y+21	; 0x15
 3fc:	1e 89       	ldd	r17, Y+22	; 0x16
 3fe:	86 e0       	ldi	r24, 0x06	; 6
 400:	8c 83       	std	Y+4, r24	; 0x04
 402:	1a 83       	std	Y+2, r17	; 0x02
 404:	09 83       	std	Y+1, r16	; 0x01
 406:	8f ef       	ldi	r24, 0xFF	; 255
 408:	9f e7       	ldi	r25, 0x7F	; 127
 40a:	9e 83       	std	Y+6, r25	; 0x06
 40c:	8d 83       	std	Y+5, r24	; 0x05
 40e:	ae 01       	movw	r20, r28
 410:	47 5e       	subi	r20, 0xE7	; 231
 412:	5f 4f       	sbci	r21, 0xFF	; 255
 414:	6f 89       	ldd	r22, Y+23	; 0x17
 416:	78 8d       	ldd	r23, Y+24	; 0x18
 418:	ce 01       	movw	r24, r28
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	0e 94 1a 02 	call	0x434	; 0x434 <vfprintf>
 420:	2f 81       	ldd	r18, Y+7	; 0x07
 422:	38 85       	ldd	r19, Y+8	; 0x08
 424:	f8 01       	movw	r30, r16
 426:	e2 0f       	add	r30, r18
 428:	f3 1f       	adc	r31, r19
 42a:	10 82       	st	Z, r1
 42c:	2e 96       	adiw	r28, 0x0e	; 14
 42e:	e4 e0       	ldi	r30, 0x04	; 4
 430:	0c 94 cb 04 	jmp	0x996	; 0x996 <__epilogue_restores__+0x1c>

00000434 <vfprintf>:
 434:	ac e0       	ldi	r26, 0x0C	; 12
 436:	b0 e0       	ldi	r27, 0x00	; 0
 438:	e0 e2       	ldi	r30, 0x20	; 32
 43a:	f2 e0       	ldi	r31, 0x02	; 2
 43c:	0c 94 a1 04 	jmp	0x942	; 0x942 <__prologue_saves__>
 440:	7c 01       	movw	r14, r24
 442:	6b 01       	movw	r12, r22
 444:	8a 01       	movw	r16, r20
 446:	fc 01       	movw	r30, r24
 448:	17 82       	std	Z+7, r1	; 0x07
 44a:	16 82       	std	Z+6, r1	; 0x06
 44c:	83 81       	ldd	r24, Z+3	; 0x03
 44e:	81 ff       	sbrs	r24, 1
 450:	bd c1       	rjmp	.+890    	; 0x7cc <vfprintf+0x398>
 452:	ce 01       	movw	r24, r28
 454:	01 96       	adiw	r24, 0x01	; 1
 456:	4c 01       	movw	r8, r24
 458:	f7 01       	movw	r30, r14
 45a:	93 81       	ldd	r25, Z+3	; 0x03
 45c:	f6 01       	movw	r30, r12
 45e:	93 fd       	sbrc	r25, 3
 460:	85 91       	lpm	r24, Z+
 462:	93 ff       	sbrs	r25, 3
 464:	81 91       	ld	r24, Z+
 466:	6f 01       	movw	r12, r30
 468:	88 23       	and	r24, r24
 46a:	09 f4       	brne	.+2      	; 0x46e <vfprintf+0x3a>
 46c:	ab c1       	rjmp	.+854    	; 0x7c4 <vfprintf+0x390>
 46e:	85 32       	cpi	r24, 0x25	; 37
 470:	39 f4       	brne	.+14     	; 0x480 <vfprintf+0x4c>
 472:	93 fd       	sbrc	r25, 3
 474:	85 91       	lpm	r24, Z+
 476:	93 ff       	sbrs	r25, 3
 478:	81 91       	ld	r24, Z+
 47a:	6f 01       	movw	r12, r30
 47c:	85 32       	cpi	r24, 0x25	; 37
 47e:	29 f4       	brne	.+10     	; 0x48a <vfprintf+0x56>
 480:	b7 01       	movw	r22, r14
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 0b 04 	call	0x816	; 0x816 <fputc>
 488:	e7 cf       	rjmp	.-50     	; 0x458 <vfprintf+0x24>
 48a:	51 2c       	mov	r5, r1
 48c:	31 2c       	mov	r3, r1
 48e:	20 e0       	ldi	r18, 0x00	; 0
 490:	20 32       	cpi	r18, 0x20	; 32
 492:	a0 f4       	brcc	.+40     	; 0x4bc <vfprintf+0x88>
 494:	8b 32       	cpi	r24, 0x2B	; 43
 496:	69 f0       	breq	.+26     	; 0x4b2 <vfprintf+0x7e>
 498:	30 f4       	brcc	.+12     	; 0x4a6 <vfprintf+0x72>
 49a:	80 32       	cpi	r24, 0x20	; 32
 49c:	59 f0       	breq	.+22     	; 0x4b4 <vfprintf+0x80>
 49e:	83 32       	cpi	r24, 0x23	; 35
 4a0:	69 f4       	brne	.+26     	; 0x4bc <vfprintf+0x88>
 4a2:	20 61       	ori	r18, 0x10	; 16
 4a4:	2c c0       	rjmp	.+88     	; 0x4fe <vfprintf+0xca>
 4a6:	8d 32       	cpi	r24, 0x2D	; 45
 4a8:	39 f0       	breq	.+14     	; 0x4b8 <vfprintf+0x84>
 4aa:	80 33       	cpi	r24, 0x30	; 48
 4ac:	39 f4       	brne	.+14     	; 0x4bc <vfprintf+0x88>
 4ae:	21 60       	ori	r18, 0x01	; 1
 4b0:	26 c0       	rjmp	.+76     	; 0x4fe <vfprintf+0xca>
 4b2:	22 60       	ori	r18, 0x02	; 2
 4b4:	24 60       	ori	r18, 0x04	; 4
 4b6:	23 c0       	rjmp	.+70     	; 0x4fe <vfprintf+0xca>
 4b8:	28 60       	ori	r18, 0x08	; 8
 4ba:	21 c0       	rjmp	.+66     	; 0x4fe <vfprintf+0xca>
 4bc:	27 fd       	sbrc	r18, 7
 4be:	27 c0       	rjmp	.+78     	; 0x50e <vfprintf+0xda>
 4c0:	30 ed       	ldi	r19, 0xD0	; 208
 4c2:	38 0f       	add	r19, r24
 4c4:	3a 30       	cpi	r19, 0x0A	; 10
 4c6:	78 f4       	brcc	.+30     	; 0x4e6 <vfprintf+0xb2>
 4c8:	26 ff       	sbrs	r18, 6
 4ca:	06 c0       	rjmp	.+12     	; 0x4d8 <vfprintf+0xa4>
 4cc:	fa e0       	ldi	r31, 0x0A	; 10
 4ce:	5f 9e       	mul	r5, r31
 4d0:	30 0d       	add	r19, r0
 4d2:	11 24       	eor	r1, r1
 4d4:	53 2e       	mov	r5, r19
 4d6:	13 c0       	rjmp	.+38     	; 0x4fe <vfprintf+0xca>
 4d8:	8a e0       	ldi	r24, 0x0A	; 10
 4da:	38 9e       	mul	r3, r24
 4dc:	30 0d       	add	r19, r0
 4de:	11 24       	eor	r1, r1
 4e0:	33 2e       	mov	r3, r19
 4e2:	20 62       	ori	r18, 0x20	; 32
 4e4:	0c c0       	rjmp	.+24     	; 0x4fe <vfprintf+0xca>
 4e6:	8e 32       	cpi	r24, 0x2E	; 46
 4e8:	21 f4       	brne	.+8      	; 0x4f2 <vfprintf+0xbe>
 4ea:	26 fd       	sbrc	r18, 6
 4ec:	6b c1       	rjmp	.+726    	; 0x7c4 <vfprintf+0x390>
 4ee:	20 64       	ori	r18, 0x40	; 64
 4f0:	06 c0       	rjmp	.+12     	; 0x4fe <vfprintf+0xca>
 4f2:	8c 36       	cpi	r24, 0x6C	; 108
 4f4:	11 f4       	brne	.+4      	; 0x4fa <vfprintf+0xc6>
 4f6:	20 68       	ori	r18, 0x80	; 128
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <vfprintf+0xca>
 4fa:	88 36       	cpi	r24, 0x68	; 104
 4fc:	41 f4       	brne	.+16     	; 0x50e <vfprintf+0xda>
 4fe:	f6 01       	movw	r30, r12
 500:	93 fd       	sbrc	r25, 3
 502:	85 91       	lpm	r24, Z+
 504:	93 ff       	sbrs	r25, 3
 506:	81 91       	ld	r24, Z+
 508:	6f 01       	movw	r12, r30
 50a:	81 11       	cpse	r24, r1
 50c:	c1 cf       	rjmp	.-126    	; 0x490 <vfprintf+0x5c>
 50e:	98 2f       	mov	r25, r24
 510:	9f 7d       	andi	r25, 0xDF	; 223
 512:	95 54       	subi	r25, 0x45	; 69
 514:	93 30       	cpi	r25, 0x03	; 3
 516:	28 f4       	brcc	.+10     	; 0x522 <vfprintf+0xee>
 518:	0c 5f       	subi	r16, 0xFC	; 252
 51a:	1f 4f       	sbci	r17, 0xFF	; 255
 51c:	ff e3       	ldi	r31, 0x3F	; 63
 51e:	f9 83       	std	Y+1, r31	; 0x01
 520:	0d c0       	rjmp	.+26     	; 0x53c <vfprintf+0x108>
 522:	83 36       	cpi	r24, 0x63	; 99
 524:	31 f0       	breq	.+12     	; 0x532 <vfprintf+0xfe>
 526:	83 37       	cpi	r24, 0x73	; 115
 528:	71 f0       	breq	.+28     	; 0x546 <vfprintf+0x112>
 52a:	83 35       	cpi	r24, 0x53	; 83
 52c:	09 f0       	breq	.+2      	; 0x530 <vfprintf+0xfc>
 52e:	5b c0       	rjmp	.+182    	; 0x5e6 <vfprintf+0x1b2>
 530:	22 c0       	rjmp	.+68     	; 0x576 <vfprintf+0x142>
 532:	f8 01       	movw	r30, r16
 534:	80 81       	ld	r24, Z
 536:	89 83       	std	Y+1, r24	; 0x01
 538:	0e 5f       	subi	r16, 0xFE	; 254
 53a:	1f 4f       	sbci	r17, 0xFF	; 255
 53c:	44 24       	eor	r4, r4
 53e:	43 94       	inc	r4
 540:	51 2c       	mov	r5, r1
 542:	54 01       	movw	r10, r8
 544:	15 c0       	rjmp	.+42     	; 0x570 <vfprintf+0x13c>
 546:	38 01       	movw	r6, r16
 548:	f2 e0       	ldi	r31, 0x02	; 2
 54a:	6f 0e       	add	r6, r31
 54c:	71 1c       	adc	r7, r1
 54e:	f8 01       	movw	r30, r16
 550:	a0 80       	ld	r10, Z
 552:	b1 80       	ldd	r11, Z+1	; 0x01
 554:	26 ff       	sbrs	r18, 6
 556:	03 c0       	rjmp	.+6      	; 0x55e <vfprintf+0x12a>
 558:	65 2d       	mov	r22, r5
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <vfprintf+0x12e>
 55e:	6f ef       	ldi	r22, 0xFF	; 255
 560:	7f ef       	ldi	r23, 0xFF	; 255
 562:	c5 01       	movw	r24, r10
 564:	2c 87       	std	Y+12, r18	; 0x0c
 566:	0e 94 00 04 	call	0x800	; 0x800 <strnlen>
 56a:	2c 01       	movw	r4, r24
 56c:	83 01       	movw	r16, r6
 56e:	2c 85       	ldd	r18, Y+12	; 0x0c
 570:	2f 77       	andi	r18, 0x7F	; 127
 572:	22 2e       	mov	r2, r18
 574:	17 c0       	rjmp	.+46     	; 0x5a4 <vfprintf+0x170>
 576:	38 01       	movw	r6, r16
 578:	f2 e0       	ldi	r31, 0x02	; 2
 57a:	6f 0e       	add	r6, r31
 57c:	71 1c       	adc	r7, r1
 57e:	f8 01       	movw	r30, r16
 580:	a0 80       	ld	r10, Z
 582:	b1 80       	ldd	r11, Z+1	; 0x01
 584:	26 ff       	sbrs	r18, 6
 586:	03 c0       	rjmp	.+6      	; 0x58e <vfprintf+0x15a>
 588:	65 2d       	mov	r22, r5
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <vfprintf+0x15e>
 58e:	6f ef       	ldi	r22, 0xFF	; 255
 590:	7f ef       	ldi	r23, 0xFF	; 255
 592:	c5 01       	movw	r24, r10
 594:	2c 87       	std	Y+12, r18	; 0x0c
 596:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <strnlen_P>
 59a:	2c 01       	movw	r4, r24
 59c:	2c 85       	ldd	r18, Y+12	; 0x0c
 59e:	20 68       	ori	r18, 0x80	; 128
 5a0:	22 2e       	mov	r2, r18
 5a2:	83 01       	movw	r16, r6
 5a4:	23 fc       	sbrc	r2, 3
 5a6:	1b c0       	rjmp	.+54     	; 0x5de <vfprintf+0x1aa>
 5a8:	83 2d       	mov	r24, r3
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	48 16       	cp	r4, r24
 5ae:	59 06       	cpc	r5, r25
 5b0:	b0 f4       	brcc	.+44     	; 0x5de <vfprintf+0x1aa>
 5b2:	b7 01       	movw	r22, r14
 5b4:	80 e2       	ldi	r24, 0x20	; 32
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	0e 94 0b 04 	call	0x816	; 0x816 <fputc>
 5bc:	3a 94       	dec	r3
 5be:	f4 cf       	rjmp	.-24     	; 0x5a8 <vfprintf+0x174>
 5c0:	f5 01       	movw	r30, r10
 5c2:	27 fc       	sbrc	r2, 7
 5c4:	85 91       	lpm	r24, Z+
 5c6:	27 fe       	sbrs	r2, 7
 5c8:	81 91       	ld	r24, Z+
 5ca:	5f 01       	movw	r10, r30
 5cc:	b7 01       	movw	r22, r14
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	0e 94 0b 04 	call	0x816	; 0x816 <fputc>
 5d4:	31 10       	cpse	r3, r1
 5d6:	3a 94       	dec	r3
 5d8:	f1 e0       	ldi	r31, 0x01	; 1
 5da:	4f 1a       	sub	r4, r31
 5dc:	51 08       	sbc	r5, r1
 5de:	41 14       	cp	r4, r1
 5e0:	51 04       	cpc	r5, r1
 5e2:	71 f7       	brne	.-36     	; 0x5c0 <vfprintf+0x18c>
 5e4:	e5 c0       	rjmp	.+458    	; 0x7b0 <vfprintf+0x37c>
 5e6:	84 36       	cpi	r24, 0x64	; 100
 5e8:	11 f0       	breq	.+4      	; 0x5ee <vfprintf+0x1ba>
 5ea:	89 36       	cpi	r24, 0x69	; 105
 5ec:	39 f5       	brne	.+78     	; 0x63c <vfprintf+0x208>
 5ee:	f8 01       	movw	r30, r16
 5f0:	27 ff       	sbrs	r18, 7
 5f2:	07 c0       	rjmp	.+14     	; 0x602 <vfprintf+0x1ce>
 5f4:	60 81       	ld	r22, Z
 5f6:	71 81       	ldd	r23, Z+1	; 0x01
 5f8:	82 81       	ldd	r24, Z+2	; 0x02
 5fa:	93 81       	ldd	r25, Z+3	; 0x03
 5fc:	0c 5f       	subi	r16, 0xFC	; 252
 5fe:	1f 4f       	sbci	r17, 0xFF	; 255
 600:	08 c0       	rjmp	.+16     	; 0x612 <vfprintf+0x1de>
 602:	60 81       	ld	r22, Z
 604:	71 81       	ldd	r23, Z+1	; 0x01
 606:	07 2e       	mov	r0, r23
 608:	00 0c       	add	r0, r0
 60a:	88 0b       	sbc	r24, r24
 60c:	99 0b       	sbc	r25, r25
 60e:	0e 5f       	subi	r16, 0xFE	; 254
 610:	1f 4f       	sbci	r17, 0xFF	; 255
 612:	2f 76       	andi	r18, 0x6F	; 111
 614:	72 2e       	mov	r7, r18
 616:	97 ff       	sbrs	r25, 7
 618:	09 c0       	rjmp	.+18     	; 0x62c <vfprintf+0x1f8>
 61a:	90 95       	com	r25
 61c:	80 95       	com	r24
 61e:	70 95       	com	r23
 620:	61 95       	neg	r22
 622:	7f 4f       	sbci	r23, 0xFF	; 255
 624:	8f 4f       	sbci	r24, 0xFF	; 255
 626:	9f 4f       	sbci	r25, 0xFF	; 255
 628:	20 68       	ori	r18, 0x80	; 128
 62a:	72 2e       	mov	r7, r18
 62c:	2a e0       	ldi	r18, 0x0A	; 10
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	a4 01       	movw	r20, r8
 632:	0e 94 43 04 	call	0x886	; 0x886 <__ultoa_invert>
 636:	a8 2e       	mov	r10, r24
 638:	a8 18       	sub	r10, r8
 63a:	44 c0       	rjmp	.+136    	; 0x6c4 <vfprintf+0x290>
 63c:	85 37       	cpi	r24, 0x75	; 117
 63e:	29 f4       	brne	.+10     	; 0x64a <vfprintf+0x216>
 640:	2f 7e       	andi	r18, 0xEF	; 239
 642:	b2 2e       	mov	r11, r18
 644:	2a e0       	ldi	r18, 0x0A	; 10
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	25 c0       	rjmp	.+74     	; 0x694 <vfprintf+0x260>
 64a:	f2 2f       	mov	r31, r18
 64c:	f9 7f       	andi	r31, 0xF9	; 249
 64e:	bf 2e       	mov	r11, r31
 650:	8f 36       	cpi	r24, 0x6F	; 111
 652:	c1 f0       	breq	.+48     	; 0x684 <vfprintf+0x250>
 654:	18 f4       	brcc	.+6      	; 0x65c <vfprintf+0x228>
 656:	88 35       	cpi	r24, 0x58	; 88
 658:	79 f0       	breq	.+30     	; 0x678 <vfprintf+0x244>
 65a:	b4 c0       	rjmp	.+360    	; 0x7c4 <vfprintf+0x390>
 65c:	80 37       	cpi	r24, 0x70	; 112
 65e:	19 f0       	breq	.+6      	; 0x666 <vfprintf+0x232>
 660:	88 37       	cpi	r24, 0x78	; 120
 662:	21 f0       	breq	.+8      	; 0x66c <vfprintf+0x238>
 664:	af c0       	rjmp	.+350    	; 0x7c4 <vfprintf+0x390>
 666:	2f 2f       	mov	r18, r31
 668:	20 61       	ori	r18, 0x10	; 16
 66a:	b2 2e       	mov	r11, r18
 66c:	b4 fe       	sbrs	r11, 4
 66e:	0d c0       	rjmp	.+26     	; 0x68a <vfprintf+0x256>
 670:	8b 2d       	mov	r24, r11
 672:	84 60       	ori	r24, 0x04	; 4
 674:	b8 2e       	mov	r11, r24
 676:	09 c0       	rjmp	.+18     	; 0x68a <vfprintf+0x256>
 678:	24 ff       	sbrs	r18, 4
 67a:	0a c0       	rjmp	.+20     	; 0x690 <vfprintf+0x25c>
 67c:	9f 2f       	mov	r25, r31
 67e:	96 60       	ori	r25, 0x06	; 6
 680:	b9 2e       	mov	r11, r25
 682:	06 c0       	rjmp	.+12     	; 0x690 <vfprintf+0x25c>
 684:	28 e0       	ldi	r18, 0x08	; 8
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	05 c0       	rjmp	.+10     	; 0x694 <vfprintf+0x260>
 68a:	20 e1       	ldi	r18, 0x10	; 16
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <vfprintf+0x260>
 690:	20 e1       	ldi	r18, 0x10	; 16
 692:	32 e0       	ldi	r19, 0x02	; 2
 694:	f8 01       	movw	r30, r16
 696:	b7 fe       	sbrs	r11, 7
 698:	07 c0       	rjmp	.+14     	; 0x6a8 <vfprintf+0x274>
 69a:	60 81       	ld	r22, Z
 69c:	71 81       	ldd	r23, Z+1	; 0x01
 69e:	82 81       	ldd	r24, Z+2	; 0x02
 6a0:	93 81       	ldd	r25, Z+3	; 0x03
 6a2:	0c 5f       	subi	r16, 0xFC	; 252
 6a4:	1f 4f       	sbci	r17, 0xFF	; 255
 6a6:	06 c0       	rjmp	.+12     	; 0x6b4 <vfprintf+0x280>
 6a8:	60 81       	ld	r22, Z
 6aa:	71 81       	ldd	r23, Z+1	; 0x01
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 5f       	subi	r16, 0xFE	; 254
 6b2:	1f 4f       	sbci	r17, 0xFF	; 255
 6b4:	a4 01       	movw	r20, r8
 6b6:	0e 94 43 04 	call	0x886	; 0x886 <__ultoa_invert>
 6ba:	a8 2e       	mov	r10, r24
 6bc:	a8 18       	sub	r10, r8
 6be:	fb 2d       	mov	r31, r11
 6c0:	ff 77       	andi	r31, 0x7F	; 127
 6c2:	7f 2e       	mov	r7, r31
 6c4:	76 fe       	sbrs	r7, 6
 6c6:	0b c0       	rjmp	.+22     	; 0x6de <vfprintf+0x2aa>
 6c8:	37 2d       	mov	r19, r7
 6ca:	3e 7f       	andi	r19, 0xFE	; 254
 6cc:	a5 14       	cp	r10, r5
 6ce:	50 f4       	brcc	.+20     	; 0x6e4 <vfprintf+0x2b0>
 6d0:	74 fe       	sbrs	r7, 4
 6d2:	0a c0       	rjmp	.+20     	; 0x6e8 <vfprintf+0x2b4>
 6d4:	72 fc       	sbrc	r7, 2
 6d6:	08 c0       	rjmp	.+16     	; 0x6e8 <vfprintf+0x2b4>
 6d8:	37 2d       	mov	r19, r7
 6da:	3e 7e       	andi	r19, 0xEE	; 238
 6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <vfprintf+0x2b4>
 6de:	ba 2c       	mov	r11, r10
 6e0:	37 2d       	mov	r19, r7
 6e2:	03 c0       	rjmp	.+6      	; 0x6ea <vfprintf+0x2b6>
 6e4:	ba 2c       	mov	r11, r10
 6e6:	01 c0       	rjmp	.+2      	; 0x6ea <vfprintf+0x2b6>
 6e8:	b5 2c       	mov	r11, r5
 6ea:	34 ff       	sbrs	r19, 4
 6ec:	0d c0       	rjmp	.+26     	; 0x708 <vfprintf+0x2d4>
 6ee:	fe 01       	movw	r30, r28
 6f0:	ea 0d       	add	r30, r10
 6f2:	f1 1d       	adc	r31, r1
 6f4:	80 81       	ld	r24, Z
 6f6:	80 33       	cpi	r24, 0x30	; 48
 6f8:	11 f4       	brne	.+4      	; 0x6fe <vfprintf+0x2ca>
 6fa:	39 7e       	andi	r19, 0xE9	; 233
 6fc:	09 c0       	rjmp	.+18     	; 0x710 <vfprintf+0x2dc>
 6fe:	32 ff       	sbrs	r19, 2
 700:	06 c0       	rjmp	.+12     	; 0x70e <vfprintf+0x2da>
 702:	b3 94       	inc	r11
 704:	b3 94       	inc	r11
 706:	04 c0       	rjmp	.+8      	; 0x710 <vfprintf+0x2dc>
 708:	83 2f       	mov	r24, r19
 70a:	86 78       	andi	r24, 0x86	; 134
 70c:	09 f0       	breq	.+2      	; 0x710 <vfprintf+0x2dc>
 70e:	b3 94       	inc	r11
 710:	33 fd       	sbrc	r19, 3
 712:	13 c0       	rjmp	.+38     	; 0x73a <vfprintf+0x306>
 714:	30 ff       	sbrs	r19, 0
 716:	06 c0       	rjmp	.+12     	; 0x724 <vfprintf+0x2f0>
 718:	5a 2c       	mov	r5, r10
 71a:	b3 14       	cp	r11, r3
 71c:	18 f4       	brcc	.+6      	; 0x724 <vfprintf+0x2f0>
 71e:	53 0c       	add	r5, r3
 720:	5b 18       	sub	r5, r11
 722:	b3 2c       	mov	r11, r3
 724:	b3 14       	cp	r11, r3
 726:	68 f4       	brcc	.+26     	; 0x742 <vfprintf+0x30e>
 728:	b7 01       	movw	r22, r14
 72a:	80 e2       	ldi	r24, 0x20	; 32
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	3c 87       	std	Y+12, r19	; 0x0c
 730:	0e 94 0b 04 	call	0x816	; 0x816 <fputc>
 734:	b3 94       	inc	r11
 736:	3c 85       	ldd	r19, Y+12	; 0x0c
 738:	f5 cf       	rjmp	.-22     	; 0x724 <vfprintf+0x2f0>
 73a:	b3 14       	cp	r11, r3
 73c:	10 f4       	brcc	.+4      	; 0x742 <vfprintf+0x30e>
 73e:	3b 18       	sub	r3, r11
 740:	01 c0       	rjmp	.+2      	; 0x744 <vfprintf+0x310>
 742:	31 2c       	mov	r3, r1
 744:	34 ff       	sbrs	r19, 4
 746:	12 c0       	rjmp	.+36     	; 0x76c <vfprintf+0x338>
 748:	b7 01       	movw	r22, r14
 74a:	80 e3       	ldi	r24, 0x30	; 48
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	3c 87       	std	Y+12, r19	; 0x0c
 750:	0e 94 0b 04 	call	0x816	; 0x816 <fputc>
 754:	3c 85       	ldd	r19, Y+12	; 0x0c
 756:	32 ff       	sbrs	r19, 2
 758:	17 c0       	rjmp	.+46     	; 0x788 <vfprintf+0x354>
 75a:	31 fd       	sbrc	r19, 1
 75c:	03 c0       	rjmp	.+6      	; 0x764 <vfprintf+0x330>
 75e:	88 e7       	ldi	r24, 0x78	; 120
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	02 c0       	rjmp	.+4      	; 0x768 <vfprintf+0x334>
 764:	88 e5       	ldi	r24, 0x58	; 88
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	b7 01       	movw	r22, r14
 76a:	0c c0       	rjmp	.+24     	; 0x784 <vfprintf+0x350>
 76c:	83 2f       	mov	r24, r19
 76e:	86 78       	andi	r24, 0x86	; 134
 770:	59 f0       	breq	.+22     	; 0x788 <vfprintf+0x354>
 772:	31 ff       	sbrs	r19, 1
 774:	02 c0       	rjmp	.+4      	; 0x77a <vfprintf+0x346>
 776:	8b e2       	ldi	r24, 0x2B	; 43
 778:	01 c0       	rjmp	.+2      	; 0x77c <vfprintf+0x348>
 77a:	80 e2       	ldi	r24, 0x20	; 32
 77c:	37 fd       	sbrc	r19, 7
 77e:	8d e2       	ldi	r24, 0x2D	; 45
 780:	b7 01       	movw	r22, r14
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	0e 94 0b 04 	call	0x816	; 0x816 <fputc>
 788:	a5 14       	cp	r10, r5
 78a:	38 f4       	brcc	.+14     	; 0x79a <vfprintf+0x366>
 78c:	b7 01       	movw	r22, r14
 78e:	80 e3       	ldi	r24, 0x30	; 48
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 0b 04 	call	0x816	; 0x816 <fputc>
 796:	5a 94       	dec	r5
 798:	f7 cf       	rjmp	.-18     	; 0x788 <vfprintf+0x354>
 79a:	aa 94       	dec	r10
 79c:	f4 01       	movw	r30, r8
 79e:	ea 0d       	add	r30, r10
 7a0:	f1 1d       	adc	r31, r1
 7a2:	80 81       	ld	r24, Z
 7a4:	b7 01       	movw	r22, r14
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e 94 0b 04 	call	0x816	; 0x816 <fputc>
 7ac:	a1 10       	cpse	r10, r1
 7ae:	f5 cf       	rjmp	.-22     	; 0x79a <vfprintf+0x366>
 7b0:	33 20       	and	r3, r3
 7b2:	09 f4       	brne	.+2      	; 0x7b6 <vfprintf+0x382>
 7b4:	51 ce       	rjmp	.-862    	; 0x458 <vfprintf+0x24>
 7b6:	b7 01       	movw	r22, r14
 7b8:	80 e2       	ldi	r24, 0x20	; 32
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0e 94 0b 04 	call	0x816	; 0x816 <fputc>
 7c0:	3a 94       	dec	r3
 7c2:	f6 cf       	rjmp	.-20     	; 0x7b0 <vfprintf+0x37c>
 7c4:	f7 01       	movw	r30, r14
 7c6:	86 81       	ldd	r24, Z+6	; 0x06
 7c8:	97 81       	ldd	r25, Z+7	; 0x07
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <vfprintf+0x39c>
 7cc:	8f ef       	ldi	r24, 0xFF	; 255
 7ce:	9f ef       	ldi	r25, 0xFF	; 255
 7d0:	2c 96       	adiw	r28, 0x0c	; 12
 7d2:	e2 e1       	ldi	r30, 0x12	; 18
 7d4:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__epilogue_restores__>

000007d8 <strnlen_P>:
 7d8:	fc 01       	movw	r30, r24
 7da:	05 90       	lpm	r0, Z+
 7dc:	61 50       	subi	r22, 0x01	; 1
 7de:	70 40       	sbci	r23, 0x00	; 0
 7e0:	01 10       	cpse	r0, r1
 7e2:	d8 f7       	brcc	.-10     	; 0x7da <strnlen_P+0x2>
 7e4:	80 95       	com	r24
 7e6:	90 95       	com	r25
 7e8:	8e 0f       	add	r24, r30
 7ea:	9f 1f       	adc	r25, r31
 7ec:	08 95       	ret

000007ee <memcpy>:
 7ee:	fb 01       	movw	r30, r22
 7f0:	dc 01       	movw	r26, r24
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <memcpy+0xa>
 7f4:	01 90       	ld	r0, Z+
 7f6:	0d 92       	st	X+, r0
 7f8:	41 50       	subi	r20, 0x01	; 1
 7fa:	50 40       	sbci	r21, 0x00	; 0
 7fc:	d8 f7       	brcc	.-10     	; 0x7f4 <memcpy+0x6>
 7fe:	08 95       	ret

00000800 <strnlen>:
 800:	fc 01       	movw	r30, r24
 802:	61 50       	subi	r22, 0x01	; 1
 804:	70 40       	sbci	r23, 0x00	; 0
 806:	01 90       	ld	r0, Z+
 808:	01 10       	cpse	r0, r1
 80a:	d8 f7       	brcc	.-10     	; 0x802 <strnlen+0x2>
 80c:	80 95       	com	r24
 80e:	90 95       	com	r25
 810:	8e 0f       	add	r24, r30
 812:	9f 1f       	adc	r25, r31
 814:	08 95       	ret

00000816 <fputc>:
 816:	0f 93       	push	r16
 818:	1f 93       	push	r17
 81a:	cf 93       	push	r28
 81c:	df 93       	push	r29
 81e:	fb 01       	movw	r30, r22
 820:	23 81       	ldd	r18, Z+3	; 0x03
 822:	21 fd       	sbrc	r18, 1
 824:	03 c0       	rjmp	.+6      	; 0x82c <fputc+0x16>
 826:	8f ef       	ldi	r24, 0xFF	; 255
 828:	9f ef       	ldi	r25, 0xFF	; 255
 82a:	28 c0       	rjmp	.+80     	; 0x87c <fputc+0x66>
 82c:	22 ff       	sbrs	r18, 2
 82e:	16 c0       	rjmp	.+44     	; 0x85c <fputc+0x46>
 830:	46 81       	ldd	r20, Z+6	; 0x06
 832:	57 81       	ldd	r21, Z+7	; 0x07
 834:	24 81       	ldd	r18, Z+4	; 0x04
 836:	35 81       	ldd	r19, Z+5	; 0x05
 838:	42 17       	cp	r20, r18
 83a:	53 07       	cpc	r21, r19
 83c:	44 f4       	brge	.+16     	; 0x84e <fputc+0x38>
 83e:	a0 81       	ld	r26, Z
 840:	b1 81       	ldd	r27, Z+1	; 0x01
 842:	9d 01       	movw	r18, r26
 844:	2f 5f       	subi	r18, 0xFF	; 255
 846:	3f 4f       	sbci	r19, 0xFF	; 255
 848:	31 83       	std	Z+1, r19	; 0x01
 84a:	20 83       	st	Z, r18
 84c:	8c 93       	st	X, r24
 84e:	26 81       	ldd	r18, Z+6	; 0x06
 850:	37 81       	ldd	r19, Z+7	; 0x07
 852:	2f 5f       	subi	r18, 0xFF	; 255
 854:	3f 4f       	sbci	r19, 0xFF	; 255
 856:	37 83       	std	Z+7, r19	; 0x07
 858:	26 83       	std	Z+6, r18	; 0x06
 85a:	10 c0       	rjmp	.+32     	; 0x87c <fputc+0x66>
 85c:	eb 01       	movw	r28, r22
 85e:	09 2f       	mov	r16, r25
 860:	18 2f       	mov	r17, r24
 862:	00 84       	ldd	r0, Z+8	; 0x08
 864:	f1 85       	ldd	r31, Z+9	; 0x09
 866:	e0 2d       	mov	r30, r0
 868:	09 95       	icall
 86a:	89 2b       	or	r24, r25
 86c:	e1 f6       	brne	.-72     	; 0x826 <fputc+0x10>
 86e:	8e 81       	ldd	r24, Y+6	; 0x06
 870:	9f 81       	ldd	r25, Y+7	; 0x07
 872:	01 96       	adiw	r24, 0x01	; 1
 874:	9f 83       	std	Y+7, r25	; 0x07
 876:	8e 83       	std	Y+6, r24	; 0x06
 878:	81 2f       	mov	r24, r17
 87a:	90 2f       	mov	r25, r16
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	1f 91       	pop	r17
 882:	0f 91       	pop	r16
 884:	08 95       	ret

00000886 <__ultoa_invert>:
 886:	fa 01       	movw	r30, r20
 888:	aa 27       	eor	r26, r26
 88a:	28 30       	cpi	r18, 0x08	; 8
 88c:	51 f1       	breq	.+84     	; 0x8e2 <__ultoa_invert+0x5c>
 88e:	20 31       	cpi	r18, 0x10	; 16
 890:	81 f1       	breq	.+96     	; 0x8f2 <__ultoa_invert+0x6c>
 892:	e8 94       	clt
 894:	6f 93       	push	r22
 896:	6e 7f       	andi	r22, 0xFE	; 254
 898:	6e 5f       	subi	r22, 0xFE	; 254
 89a:	7f 4f       	sbci	r23, 0xFF	; 255
 89c:	8f 4f       	sbci	r24, 0xFF	; 255
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	af 4f       	sbci	r26, 0xFF	; 255
 8a2:	b1 e0       	ldi	r27, 0x01	; 1
 8a4:	3e d0       	rcall	.+124    	; 0x922 <__stack+0x23>
 8a6:	b4 e0       	ldi	r27, 0x04	; 4
 8a8:	3c d0       	rcall	.+120    	; 0x922 <__stack+0x23>
 8aa:	67 0f       	add	r22, r23
 8ac:	78 1f       	adc	r23, r24
 8ae:	89 1f       	adc	r24, r25
 8b0:	9a 1f       	adc	r25, r26
 8b2:	a1 1d       	adc	r26, r1
 8b4:	68 0f       	add	r22, r24
 8b6:	79 1f       	adc	r23, r25
 8b8:	8a 1f       	adc	r24, r26
 8ba:	91 1d       	adc	r25, r1
 8bc:	a1 1d       	adc	r26, r1
 8be:	6a 0f       	add	r22, r26
 8c0:	71 1d       	adc	r23, r1
 8c2:	81 1d       	adc	r24, r1
 8c4:	91 1d       	adc	r25, r1
 8c6:	a1 1d       	adc	r26, r1
 8c8:	20 d0       	rcall	.+64     	; 0x90a <__stack+0xb>
 8ca:	09 f4       	brne	.+2      	; 0x8ce <__ultoa_invert+0x48>
 8cc:	68 94       	set
 8ce:	3f 91       	pop	r19
 8d0:	2a e0       	ldi	r18, 0x0A	; 10
 8d2:	26 9f       	mul	r18, r22
 8d4:	11 24       	eor	r1, r1
 8d6:	30 19       	sub	r19, r0
 8d8:	30 5d       	subi	r19, 0xD0	; 208
 8da:	31 93       	st	Z+, r19
 8dc:	de f6       	brtc	.-74     	; 0x894 <__ultoa_invert+0xe>
 8de:	cf 01       	movw	r24, r30
 8e0:	08 95       	ret
 8e2:	46 2f       	mov	r20, r22
 8e4:	47 70       	andi	r20, 0x07	; 7
 8e6:	40 5d       	subi	r20, 0xD0	; 208
 8e8:	41 93       	st	Z+, r20
 8ea:	b3 e0       	ldi	r27, 0x03	; 3
 8ec:	0f d0       	rcall	.+30     	; 0x90c <__stack+0xd>
 8ee:	c9 f7       	brne	.-14     	; 0x8e2 <__ultoa_invert+0x5c>
 8f0:	f6 cf       	rjmp	.-20     	; 0x8de <__ultoa_invert+0x58>
 8f2:	46 2f       	mov	r20, r22
 8f4:	4f 70       	andi	r20, 0x0F	; 15
 8f6:	40 5d       	subi	r20, 0xD0	; 208
 8f8:	4a 33       	cpi	r20, 0x3A	; 58
 8fa:	18 f0       	brcs	.+6      	; 0x902 <__stack+0x3>
 8fc:	49 5d       	subi	r20, 0xD9	; 217
 8fe:	31 fd       	sbrc	r19, 1
 900:	40 52       	subi	r20, 0x20	; 32
 902:	41 93       	st	Z+, r20
 904:	02 d0       	rcall	.+4      	; 0x90a <__stack+0xb>
 906:	a9 f7       	brne	.-22     	; 0x8f2 <__ultoa_invert+0x6c>
 908:	ea cf       	rjmp	.-44     	; 0x8de <__ultoa_invert+0x58>
 90a:	b4 e0       	ldi	r27, 0x04	; 4
 90c:	a6 95       	lsr	r26
 90e:	97 95       	ror	r25
 910:	87 95       	ror	r24
 912:	77 95       	ror	r23
 914:	67 95       	ror	r22
 916:	ba 95       	dec	r27
 918:	c9 f7       	brne	.-14     	; 0x90c <__stack+0xd>
 91a:	00 97       	sbiw	r24, 0x00	; 0
 91c:	61 05       	cpc	r22, r1
 91e:	71 05       	cpc	r23, r1
 920:	08 95       	ret
 922:	9b 01       	movw	r18, r22
 924:	ac 01       	movw	r20, r24
 926:	0a 2e       	mov	r0, r26
 928:	06 94       	lsr	r0
 92a:	57 95       	ror	r21
 92c:	47 95       	ror	r20
 92e:	37 95       	ror	r19
 930:	27 95       	ror	r18
 932:	ba 95       	dec	r27
 934:	c9 f7       	brne	.-14     	; 0x928 <__stack+0x29>
 936:	62 0f       	add	r22, r18
 938:	73 1f       	adc	r23, r19
 93a:	84 1f       	adc	r24, r20
 93c:	95 1f       	adc	r25, r21
 93e:	a0 1d       	adc	r26, r0
 940:	08 95       	ret

00000942 <__prologue_saves__>:
 942:	2f 92       	push	r2
 944:	3f 92       	push	r3
 946:	4f 92       	push	r4
 948:	5f 92       	push	r5
 94a:	6f 92       	push	r6
 94c:	7f 92       	push	r7
 94e:	8f 92       	push	r8
 950:	9f 92       	push	r9
 952:	af 92       	push	r10
 954:	bf 92       	push	r11
 956:	cf 92       	push	r12
 958:	df 92       	push	r13
 95a:	ef 92       	push	r14
 95c:	ff 92       	push	r15
 95e:	0f 93       	push	r16
 960:	1f 93       	push	r17
 962:	cf 93       	push	r28
 964:	df 93       	push	r29
 966:	cd b7       	in	r28, 0x3d	; 61
 968:	de b7       	in	r29, 0x3e	; 62
 96a:	ca 1b       	sub	r28, r26
 96c:	db 0b       	sbc	r29, r27
 96e:	0f b6       	in	r0, 0x3f	; 63
 970:	f8 94       	cli
 972:	de bf       	out	0x3e, r29	; 62
 974:	0f be       	out	0x3f, r0	; 63
 976:	cd bf       	out	0x3d, r28	; 61
 978:	09 94       	ijmp

0000097a <__epilogue_restores__>:
 97a:	2a 88       	ldd	r2, Y+18	; 0x12
 97c:	39 88       	ldd	r3, Y+17	; 0x11
 97e:	48 88       	ldd	r4, Y+16	; 0x10
 980:	5f 84       	ldd	r5, Y+15	; 0x0f
 982:	6e 84       	ldd	r6, Y+14	; 0x0e
 984:	7d 84       	ldd	r7, Y+13	; 0x0d
 986:	8c 84       	ldd	r8, Y+12	; 0x0c
 988:	9b 84       	ldd	r9, Y+11	; 0x0b
 98a:	aa 84       	ldd	r10, Y+10	; 0x0a
 98c:	b9 84       	ldd	r11, Y+9	; 0x09
 98e:	c8 84       	ldd	r12, Y+8	; 0x08
 990:	df 80       	ldd	r13, Y+7	; 0x07
 992:	ee 80       	ldd	r14, Y+6	; 0x06
 994:	fd 80       	ldd	r15, Y+5	; 0x05
 996:	0c 81       	ldd	r16, Y+4	; 0x04
 998:	1b 81       	ldd	r17, Y+3	; 0x03
 99a:	aa 81       	ldd	r26, Y+2	; 0x02
 99c:	b9 81       	ldd	r27, Y+1	; 0x01
 99e:	ce 0f       	add	r28, r30
 9a0:	d1 1d       	adc	r29, r1
 9a2:	0f b6       	in	r0, 0x3f	; 63
 9a4:	f8 94       	cli
 9a6:	de bf       	out	0x3e, r29	; 62
 9a8:	0f be       	out	0x3f, r0	; 63
 9aa:	cd bf       	out	0x3d, r28	; 61
 9ac:	ed 01       	movw	r28, r26
 9ae:	08 95       	ret

000009b0 <_exit>:
 9b0:	f8 94       	cli

000009b2 <__stop_program>:
 9b2:	ff cf       	rjmp	.-2      	; 0x9b2 <__stop_program>
