
Temperatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000208  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000669  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000287  00000000  00000000  00000a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000088d  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00001518  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000ee8a  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000216  00000000  00000000  000104d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000106e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000029d3  00000000  00000000  00010768  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	9f d0       	rcall	.+318    	; 0x1da <main>
  9c:	b3 c0       	rjmp	.+358    	; 0x204 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <_LCD_OutNibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	80 ff       	sbrs	r24, 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <_LCD_OutNibble+0x8>
  a4:	41 9a       	sbi	0x08, 1	; 8
  a6:	01 c0       	rjmp	.+2      	; 0xaa <_LCD_OutNibble+0xa>
  a8:	41 98       	cbi	0x08, 1	; 8
  aa:	81 ff       	sbrs	r24, 1
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <_LCD_OutNibble+0x12>
  ae:	42 9a       	sbi	0x08, 2	; 8
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <_LCD_OutNibble+0x14>
  b2:	42 98       	cbi	0x08, 2	; 8
  b4:	82 ff       	sbrs	r24, 2
  b6:	02 c0       	rjmp	.+4      	; 0xbc <_LCD_OutNibble+0x1c>
  b8:	43 9a       	sbi	0x08, 3	; 8
  ba:	01 c0       	rjmp	.+2      	; 0xbe <_LCD_OutNibble+0x1e>
  bc:	43 98       	cbi	0x08, 3	; 8
  be:	83 ff       	sbrs	r24, 3
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <_LCD_OutNibble+0x26>
  c2:	44 9a       	sbi	0x08, 4	; 8
  c4:	08 95       	ret
  c6:	44 98       	cbi	0x08, 4	; 8
  c8:	08 95       	ret

000000ca <_LCD_InNibble>:
  ca:	86 b1       	in	r24, 0x06	; 6
  cc:	86 95       	lsr	r24
  ce:	81 70       	andi	r24, 0x01	; 1
  d0:	32 99       	sbic	0x06, 2	; 6
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	33 99       	sbic	0x06, 3	; 6
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	34 99       	sbic	0x06, 4	; 6
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	08 95       	ret

000000de <_LCD_Read>:
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	39 98       	cbi	0x07, 1	; 7
  e4:	3a 98       	cbi	0x07, 2	; 7
  e6:	3b 98       	cbi	0x07, 3	; 7
  e8:	3c 98       	cbi	0x07, 4	; 7
  ea:	5e 9a       	sbi	0x0b, 6	; 11
  ec:	5d 9a       	sbi	0x0b, 5	; 11
  ee:	ed df       	rcall	.-38     	; 0xca <_LCD_InNibble>
  f0:	90 e1       	ldi	r25, 0x10	; 16
  f2:	89 9f       	mul	r24, r25
  f4:	e0 01       	movw	r28, r0
  f6:	11 24       	eor	r1, r1
  f8:	5d 98       	cbi	0x0b, 5	; 11
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	e6 df       	rcall	.-52     	; 0xca <_LCD_InNibble>
  fe:	5d 98       	cbi	0x0b, 5	; 11
 100:	8c 2b       	or	r24, r28
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <LCD_ReadStatus>:
 108:	5c 98       	cbi	0x0b, 4	; 11
 10a:	e9 cf       	rjmp	.-46     	; 0xde <_LCD_Read>
 10c:	08 95       	ret

0000010e <_LCD_Write>:
 10e:	cf 93       	push	r28
 110:	c8 2f       	mov	r28, r24
 112:	39 9a       	sbi	0x07, 1	; 7
 114:	3a 9a       	sbi	0x07, 2	; 7
 116:	3b 9a       	sbi	0x07, 3	; 7
 118:	3c 9a       	sbi	0x07, 4	; 7
 11a:	5e 98       	cbi	0x0b, 6	; 11
 11c:	5d 9a       	sbi	0x0b, 5	; 11
 11e:	82 95       	swap	r24
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	be df       	rcall	.-132    	; 0xa0 <_LCD_OutNibble>
 124:	5d 98       	cbi	0x0b, 5	; 11
 126:	5d 9a       	sbi	0x0b, 5	; 11
 128:	8c 2f       	mov	r24, r28
 12a:	ba df       	rcall	.-140    	; 0xa0 <_LCD_OutNibble>
 12c:	5d 98       	cbi	0x0b, 5	; 11
 12e:	ec df       	rcall	.-40     	; 0x108 <LCD_ReadStatus>
 130:	88 23       	and	r24, r24
 132:	ec f3       	brlt	.-6      	; 0x12e <_LCD_Write+0x20>
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <LCD_WriteCommand>:
 138:	5c 98       	cbi	0x0b, 4	; 11
 13a:	e9 cf       	rjmp	.-46     	; 0x10e <_LCD_Write>
 13c:	08 95       	ret

0000013e <LCD_WriteData>:
 13e:	5c 9a       	sbi	0x0b, 4	; 11
 140:	e6 cf       	rjmp	.-52     	; 0x10e <_LCD_Write>
 142:	08 95       	ret

00000144 <LCD_WriteText>:
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
 14a:	88 81       	ld	r24, Y
 14c:	88 23       	and	r24, r24
 14e:	29 f0       	breq	.+10     	; 0x15a <LCD_WriteText+0x16>
 150:	21 96       	adiw	r28, 0x01	; 1
 152:	f5 df       	rcall	.-22     	; 0x13e <LCD_WriteData>
 154:	89 91       	ld	r24, Y+
 156:	81 11       	cpse	r24, r1
 158:	fc cf       	rjmp	.-8      	; 0x152 <LCD_WriteText+0xe>
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <LCD_Clear>:
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	ea df       	rcall	.-44     	; 0x138 <LCD_WriteCommand>
 164:	83 ef       	ldi	r24, 0xF3	; 243
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_Clear+0x8>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_Clear+0xe>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 172:	cf 93       	push	r28
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
 174:	39 9a       	sbi	0x07, 1	; 7
LCD_DB5_DIR |= LCD_DB5; //
 176:	3a 9a       	sbi	0x07, 2	; 7
LCD_DB6_DIR |= LCD_DB6; //
 178:	3b 9a       	sbi	0x07, 3	; 7
LCD_DB7_DIR |= LCD_DB7; //
 17a:	3c 9a       	sbi	0x07, 4	; 7
LCD_E_DIR 	|= LCD_E;   //
 17c:	55 9a       	sbi	0x0a, 5	; 10
LCD_RS_DIR 	|= LCD_RS;  //
 17e:	54 9a       	sbi	0x0a, 4	; 10
LCD_RW_DIR 	|= LCD_RW;  //
 180:	56 9a       	sbi	0x0a, 6	; 10
 182:	85 ea       	ldi	r24, 0xA5	; 165
 184:	9e e0       	ldi	r25, 0x0E	; 14
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_Initalize+0x14>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_Initalize+0x1a>
 18c:	00 00       	nop
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 18e:	5c 98       	cbi	0x0b, 4	; 11
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 190:	5d 98       	cbi	0x0b, 5	; 11
LCD_RW_PORT &= ~LCD_RW;
 192:	5e 98       	cbi	0x0b, 6	; 11
 194:	c3 e0       	ldi	r28, 0x03	; 3
for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
  {
  LCD_E_PORT |= LCD_E; //  E = 1
 196:	5d 9a       	sbi	0x0b, 5	; 11
  _LCD_OutNibble(0x03); // tryb 8-bitowy
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	82 df       	rcall	.-252    	; 0xa0 <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
 19c:	5d 98       	cbi	0x0b, 5	; 11
 19e:	81 ee       	ldi	r24, 0xE1	; 225
 1a0:	94 e0       	ldi	r25, 0x04	; 4
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_Initalize+0x30>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_Initalize+0x36>
 1a8:	00 00       	nop
 1aa:	c1 50       	subi	r28, 0x01	; 1
LCD_RW_DIR 	|= LCD_RW;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
LCD_RW_PORT &= ~LCD_RW;
for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 1ac:	a1 f7       	brne	.-24     	; 0x196 <LCD_Initalize+0x24>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
 1ae:	5d 9a       	sbi	0x0b, 5	; 11
_LCD_OutNibble(0x02); // tryb 4-bitowy
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	76 df       	rcall	.-276    	; 0xa0 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
 1b4:	5d 98       	cbi	0x0b, 5	; 11
 1b6:	89 ef       	ldi	r24, 0xF9	; 249
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCD_Initalize+0x48>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCD_Initalize+0x4e>
 1c0:	00 00       	nop

_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 1c2:	88 e2       	ldi	r24, 0x28	; 40
 1c4:	b9 df       	rcall	.-142    	; 0x138 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	b7 df       	rcall	.-146    	; 0x138 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	b5 df       	rcall	.-150    	; 0x138 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 1ce:	86 e0       	ldi	r24, 0x06	; 6
 1d0:	b3 df       	rcall	.-154    	; 0x138 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 1d2:	8c e0       	ldi	r24, 0x0C	; 12
 1d4:	b1 df       	rcall	.-158    	; 0x138 <LCD_WriteCommand>
}
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <main>:
float pomiar;
char str[8];

int main(void)
{
	DDRD=0x30;
 1da:	80 e3       	ldi	r24, 0x30	; 48
 1dc:	8a b9       	out	0x0a, r24	; 10
	PORTD=0x00;
 1de:	1b b8       	out	0x0b, r1	; 11
	
	LCD_Initalize();
 1e0:	c8 df       	rcall	.-112    	; 0x172 <LCD_Initalize>
	LCD_Clear();
 1e2:	be df       	rcall	.-132    	; 0x160 <LCD_Clear>
	LCD_WriteText("Temperatura");
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	ad df       	rcall	.-166    	; 0x144 <LCD_WriteText>

	ADMUX=(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0);  // wybór kana³u ADC0
 1ea:	ec e7       	ldi	r30, 0x7C	; 124
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	10 82       	st	Z, r1
	

	ADMUX |= (1 << REFS0);  // ustaw zewnetrzne napiecie
 1f0:	80 81       	ld	r24, Z
 1f2:	80 64       	ori	r24, 0x40	; 64
 1f4:	80 83       	st	Z, r24
	ADMUX &= ~(0 << REFS1); // odniesienia na AVCC
 1f6:	80 81       	ld	r24, Z
 1f8:	80 83       	st	Z, r24

sei();
 1fa:	78 94       	sei

	ADCSRA=(1<<ADEN)			 //ustawienie bity ADEN=1 - wlaczenie
 1fc:	87 e8       	ldi	r24, 0x87	; 135
 1fe:	80 93 7a 00 	sts	0x007A, r24
	|(1<<ADPS0)			 // ustawienie preskalera na 128 // ustawienie
	|(1<<ADPS1)			 // czestotliwosc taktowania przetwornika A/C, f=16Mhz/128
	|(1<<ADPS2);


	while(1);
 202:	ff cf       	rjmp	.-2      	; 0x202 <main+0x28>

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
