
GccBoardProject2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000025a  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000778  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000312  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d3  00000000  00000000  00000e52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00001528  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006c4b  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000229  00000000  00000000  00008267  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00008490  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000265f  00000000  00000000  000084f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	8d d0       	rcall	.+282    	; 0x1a6 <main>
  8c:	e4 c0       	rjmp	.+456    	; 0x256 <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <_LCD_OutNibble>:
// Funkcja wystawiaj¹ca pó³bajt na magistralê danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
	if(nibbleToWrite & 0x01)
  90:	80 ff       	sbrs	r24, 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <_LCD_OutNibble+0x8>
	LCD_DB4_PORT |= LCD_DB4;
  94:	41 9a       	sbi	0x08, 1	; 8
  96:	01 c0       	rjmp	.+2      	; 0x9a <_LCD_OutNibble+0xa>
	else
	LCD_DB4_PORT  &= ~LCD_DB4;
  98:	41 98       	cbi	0x08, 1	; 8

	if(nibbleToWrite & 0x02)
  9a:	81 ff       	sbrs	r24, 1
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <_LCD_OutNibble+0x12>
	LCD_DB5_PORT |= LCD_DB5;
  9e:	42 9a       	sbi	0x08, 2	; 8
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <_LCD_OutNibble+0x14>
	else
	LCD_DB5_PORT  &= ~LCD_DB5;
  a2:	42 98       	cbi	0x08, 2	; 8

	if(nibbleToWrite & 0x04)
  a4:	82 ff       	sbrs	r24, 2
  a6:	02 c0       	rjmp	.+4      	; 0xac <_LCD_OutNibble+0x1c>
	LCD_DB6_PORT |= LCD_DB6;
  a8:	43 9a       	sbi	0x08, 3	; 8
  aa:	01 c0       	rjmp	.+2      	; 0xae <_LCD_OutNibble+0x1e>
	else
	LCD_DB6_PORT  &= ~LCD_DB6;
  ac:	43 98       	cbi	0x08, 3	; 8

	if(nibbleToWrite & 0x08)
  ae:	83 ff       	sbrs	r24, 3
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <_LCD_OutNibble+0x26>
	LCD_DB7_PORT |= LCD_DB7;
  b2:	44 9a       	sbi	0x08, 4	; 8
  b4:	08 95       	ret
	else
	LCD_DB7_PORT  &= ~LCD_DB7;
  b6:	44 98       	cbi	0x08, 4	; 8
  b8:	08 95       	ret

000000ba <_LCD_Write>:
//
// Funkcja zapisu bajtu do wyœwietacza (bez rozró¿nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
  ba:	cf 93       	push	r28
  bc:	c8 2f       	mov	r28, r24
	LCD_E_PORT |= LCD_E;
  be:	5d 9a       	sbi	0x0b, 5	; 11
	_LCD_OutNibble(dataToWrite >> 4);
  c0:	82 95       	swap	r24
  c2:	8f 70       	andi	r24, 0x0F	; 15
  c4:	e5 df       	rcall	.-54     	; 0x90 <_LCD_OutNibble>
	LCD_E_PORT &= ~LCD_E;
  c6:	5d 98       	cbi	0x0b, 5	; 11
	LCD_E_PORT |= LCD_E;
  c8:	5d 9a       	sbi	0x0b, 5	; 11
	_LCD_OutNibble(dataToWrite);
  ca:	8c 2f       	mov	r24, r28
  cc:	e1 df       	rcall	.-62     	; 0x90 <_LCD_OutNibble>
	LCD_E_PORT &= ~LCD_E;
  ce:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	86 ea       	ldi	r24, 0xA6	; 166
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <_LCD_Write+0x18>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <_LCD_Write+0x1e>
	_delay_us(500);
}
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <LCD_WriteCommand>:
// Funkcja zapisu rozkazu do wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
	LCD_RS_PORT &= ~LCD_RS;
  dc:	5c 98       	cbi	0x0b, 4	; 11
	_LCD_Write(commandToWrite);
  de:	ed cf       	rjmp	.-38     	; 0xba <_LCD_Write>
  e0:	08 95       	ret

000000e2 <LCD_WriteData>:
// Funkcja zapisu danych do pamiêci wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
	LCD_RS_PORT |= LCD_RS;
  e2:	5c 9a       	sbi	0x0b, 4	; 11
	_LCD_Write(dataToWrite);
  e4:	ea cf       	rjmp	.-44     	; 0xba <_LCD_Write>
  e6:	08 95       	ret

000000e8 <LCD_WriteText>:
//
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	ec 01       	movw	r28, r24
	while(*text)
  ee:	88 81       	ld	r24, Y
  f0:	88 23       	and	r24, r24
  f2:	29 f0       	breq	.+10     	; 0xfe <LCD_WriteText+0x16>
  f4:	21 96       	adiw	r28, 0x01	; 1
	LCD_WriteData(*text++);
  f6:	f5 df       	rcall	.-22     	; 0xe2 <LCD_WriteData>
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
	while(*text)
  f8:	89 91       	ld	r24, Y+
  fa:	81 11       	cpse	r24, r1
  fc:	fc cf       	rjmp	.-8      	; 0xf6 <LCD_WriteText+0xe>
	LCD_WriteData(*text++);
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <LCD_GoTo>:
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
	LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 104:	90 e4       	ldi	r25, 0x40	; 64
 106:	69 9f       	mul	r22, r25
 108:	80 0d       	add	r24, r0
 10a:	11 24       	eor	r1, r1
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	e6 cf       	rjmp	.-52     	; 0xdc <LCD_WriteCommand>
 110:	08 95       	ret

00000112 <LCD_Clear>:
// Funkcja czyszczenia ekranu wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Clear(void)
{
	LCD_WriteCommand(HD44780_CLEAR);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	e3 df       	rcall	.-58     	; 0xdc <LCD_WriteCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	83 ef       	ldi	r24, 0xF3	; 243
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCD_Clear+0x8>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <LCD_Clear+0xe>
 120:	00 00       	nop
 122:	08 95       	ret

00000124 <LCD_Home>:
// Funkcja przywrócenia pocz¹tkowych wspó³rzêdnych wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Home(void)
{
	LCD_WriteCommand(HD44780_HOME);
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	da df       	rcall	.-76     	; 0xdc <LCD_WriteCommand>
 128:	83 ef       	ldi	r24, 0xF3	; 243
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_Home+0x8>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_Home+0xe>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 136:	cf 93       	push	r28
	unsigned char i;
	LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
 138:	39 9a       	sbi	0x07, 1	; 7
	LCD_DB5_DIR |= LCD_DB5; //
 13a:	3a 9a       	sbi	0x07, 2	; 7
	LCD_DB6_DIR |= LCD_DB6; //
 13c:	3b 9a       	sbi	0x07, 3	; 7
	LCD_DB7_DIR |= LCD_DB7; //
 13e:	3c 9a       	sbi	0x07, 4	; 7
	LCD_E_DIR     |= LCD_E;   //
 140:	55 9a       	sbi	0x0a, 5	; 10
	LCD_RS_DIR     |= LCD_RS;  //
 142:	54 9a       	sbi	0x0a, 4	; 10
 144:	85 ea       	ldi	r24, 0xA5	; 165
 146:	9e e0       	ldi	r25, 0x0E	; 14
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_Initalize+0x12>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_Initalize+0x18>
 14e:	00 00       	nop
	_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
	LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 150:	5c 98       	cbi	0x0b, 4	; 11
	LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 152:	5d 98       	cbi	0x0b, 5	; 11
 154:	c3 e0       	ldi	r28, 0x03	; 3

	for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
	{
		LCD_E_PORT |= LCD_E; //  E = 1
 156:	5d 9a       	sbi	0x0b, 5	; 11
		_LCD_OutNibble(0x03); // tryb 8-bitowy
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	9a df       	rcall	.-204    	; 0x90 <_LCD_OutNibble>
		LCD_E_PORT &= ~LCD_E; // E = 0
 15c:	5d 98       	cbi	0x0b, 5	; 11
 15e:	81 ee       	ldi	r24, 0xE1	; 225
 160:	94 e0       	ldi	r25, 0x04	; 4
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_Initalize+0x2c>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_Initalize+0x32>
 168:	00 00       	nop
 16a:	c1 50       	subi	r28, 0x01	; 1
	LCD_RS_DIR     |= LCD_RS;  //
	_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
	LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
	LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

	for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 16c:	a1 f7       	brne	.-24     	; 0x156 <LCD_Initalize+0x20>
		_LCD_OutNibble(0x03); // tryb 8-bitowy
		LCD_E_PORT &= ~LCD_E; // E = 0
		_delay_ms(5); // czekaj 5ms
	}

	LCD_E_PORT |= LCD_E; // E = 1
 16e:	5d 9a       	sbi	0x0b, 5	; 11
	_LCD_OutNibble(0x02); // tryb 4-bitowy
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	8e df       	rcall	.-228    	; 0x90 <_LCD_OutNibble>
	LCD_E_PORT &= ~LCD_E; // E = 0
 174:	5d 98       	cbi	0x0b, 5	; 11
 176:	89 ef       	ldi	r24, 0xF9	; 249
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_Initalize+0x44>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <LCD_Initalize+0x4a>
 180:	00 00       	nop

	_delay_ms(1); // czekaj 1ms
	LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 182:	88 e2       	ldi	r24, 0x28	; 40
 184:	ab df       	rcall	.-170    	; 0xdc <LCD_WriteCommand>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
 186:	88 e0       	ldi	r24, 0x08	; 8
 188:	a9 df       	rcall	.-174    	; 0xdc <LCD_WriteCommand>
	LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	a7 df       	rcall	.-178    	; 0xdc <LCD_WriteCommand>
 18e:	83 ef       	ldi	r24, 0xF3	; 243
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_Initalize+0x5c>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_Initalize+0x62>
 198:	00 00       	nop
	_delay_ms(2);
	LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 19a:	86 e0       	ldi	r24, 0x06	; 6
 19c:	9f df       	rcall	.-194    	; 0xdc <LCD_WriteCommand>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	9d df       	rcall	.-198    	; 0xdc <LCD_WriteCommand>
}
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <main>:
#include <math.h>
#include <stdlib.h>
 

int main(void)
{
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	6e 97       	sbiw	r28, 0x1e	; 30
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
	DDRD&=~_BV(PD6);
 1ba:	56 98       	cbi	0x0a, 6	; 10
	PORTD|=_BV(PD6);
 1bc:	5e 9a       	sbi	0x0b, 6	; 11
	int i=0;
	char t[30];
	LCD_Initalize();
 1be:	bb df       	rcall	.-138    	; 0x136 <LCD_Initalize>
	LCD_Clear();
 1c0:	a8 df       	rcall	.-176    	; 0x112 <LCD_Clear>
	LCD_Home();
 1c2:	b0 df       	rcall	.-160    	; 0x124 <LCD_Home>
	LCD_WriteText("Licznik");
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	8f df       	rcall	.-226    	; 0xe8 <LCD_WriteText>

int main(void)
{
	DDRD&=~_BV(PD6);
	PORTD|=_BV(PD6);
	int i=0;
 1ca:	00 e0       	ldi	r16, 0x00	; 0
 1cc:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1ce:	4a e0       	ldi	r20, 0x0A	; 10
 1d0:	be 01       	movw	r22, r28
 1d2:	6f 5f       	subi	r22, 0xFF	; 255
 1d4:	7f 4f       	sbci	r23, 0xFF	; 255
 1d6:	c8 01       	movw	r24, r16
 1d8:	0b d0       	rcall	.+22     	; 0x1f0 <__itoa_ncheck>
	LCD_WriteText("Licznik");
	
	while(1)
	{	
		itoa(i, t, 10);
		LCD_GoTo(3,1);
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	92 df       	rcall	.-220    	; 0x104 <LCD_GoTo>
		LCD_WriteText(t);
 1e0:	ce 01       	movw	r24, r28
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	81 df       	rcall	.-254    	; 0xe8 <LCD_WriteText>
		if(bit_is_clear(PORTD, PD6))
 1e6:	5e 99       	sbic	0x0b, 6	; 11
 1e8:	f2 cf       	rjmp	.-28     	; 0x1ce <main+0x28>
		{
			i++ ;
 1ea:	0f 5f       	subi	r16, 0xFF	; 255
 1ec:	1f 4f       	sbci	r17, 0xFF	; 255
 1ee:	ef cf       	rjmp	.-34     	; 0x1ce <main+0x28>

000001f0 <__itoa_ncheck>:
 1f0:	bb 27       	eor	r27, r27
 1f2:	4a 30       	cpi	r20, 0x0A	; 10
 1f4:	31 f4       	brne	.+12     	; 0x202 <__itoa_ncheck+0x12>
 1f6:	99 23       	and	r25, r25
 1f8:	22 f4       	brpl	.+8      	; 0x202 <__itoa_ncheck+0x12>
 1fa:	bd e2       	ldi	r27, 0x2D	; 45
 1fc:	90 95       	com	r25
 1fe:	81 95       	neg	r24
 200:	9f 4f       	sbci	r25, 0xFF	; 255
 202:	01 c0       	rjmp	.+2      	; 0x206 <__utoa_common>

00000204 <__utoa_ncheck>:
 204:	bb 27       	eor	r27, r27

00000206 <__utoa_common>:
 206:	fb 01       	movw	r30, r22
 208:	55 27       	eor	r21, r21
 20a:	aa 27       	eor	r26, r26
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	aa 1f       	adc	r26, r26
 212:	a4 17       	cp	r26, r20
 214:	10 f0       	brcs	.+4      	; 0x21a <__utoa_common+0x14>
 216:	a4 1b       	sub	r26, r20
 218:	83 95       	inc	r24
 21a:	50 51       	subi	r21, 0x10	; 16
 21c:	b9 f7       	brne	.-18     	; 0x20c <__utoa_common+0x6>
 21e:	a0 5d       	subi	r26, 0xD0	; 208
 220:	aa 33       	cpi	r26, 0x3A	; 58
 222:	08 f0       	brcs	.+2      	; 0x226 <__utoa_common+0x20>
 224:	a9 5d       	subi	r26, 0xD9	; 217
 226:	a1 93       	st	Z+, r26
 228:	00 97       	sbiw	r24, 0x00	; 0
 22a:	79 f7       	brne	.-34     	; 0x20a <__utoa_common+0x4>
 22c:	b1 11       	cpse	r27, r1
 22e:	b1 93       	st	Z+, r27
 230:	11 92       	st	Z+, r1
 232:	cb 01       	movw	r24, r22
 234:	00 c0       	rjmp	.+0      	; 0x236 <strrev>

00000236 <strrev>:
 236:	dc 01       	movw	r26, r24
 238:	fc 01       	movw	r30, r24
 23a:	67 2f       	mov	r22, r23
 23c:	71 91       	ld	r23, Z+
 23e:	77 23       	and	r23, r23
 240:	e1 f7       	brne	.-8      	; 0x23a <strrev+0x4>
 242:	32 97       	sbiw	r30, 0x02	; 2
 244:	04 c0       	rjmp	.+8      	; 0x24e <strrev+0x18>
 246:	7c 91       	ld	r23, X
 248:	6d 93       	st	X+, r22
 24a:	70 83       	st	Z, r23
 24c:	62 91       	ld	r22, -Z
 24e:	ae 17       	cp	r26, r30
 250:	bf 07       	cpc	r27, r31
 252:	c8 f3       	brcs	.-14     	; 0x246 <strrev+0x10>
 254:	08 95       	ret

00000256 <_exit>:
 256:	f8 94       	cli

00000258 <__stop_program>:
 258:	ff cf       	rjmp	.-2      	; 0x258 <__stop_program>
