
GccBoardProject2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001ce  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000616  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000235  00000000  00000000  0000095a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000699  00000000  00000000  00000b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00001228  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006880  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000199  00000000  00000000  00007b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00007d25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002616  00000000  00000000  00007d85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	92 d0       	rcall	.+292    	; 0x1b0 <main>
  8c:	9e c0       	rjmp	.+316    	; 0x1ca <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <_LCD_OutNibble>:
// Funkcja wystawiaj¹ca pó³bajt na magistralê danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
	if(nibbleToWrite & 0x01)
  90:	80 ff       	sbrs	r24, 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <_LCD_OutNibble+0x8>
	LCD_DB4_PORT |= LCD_DB4;
  94:	41 9a       	sbi	0x08, 1	; 8
  96:	01 c0       	rjmp	.+2      	; 0x9a <_LCD_OutNibble+0xa>
	else
	LCD_DB4_PORT  &= ~LCD_DB4;
  98:	41 98       	cbi	0x08, 1	; 8

	if(nibbleToWrite & 0x02)
  9a:	81 ff       	sbrs	r24, 1
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <_LCD_OutNibble+0x12>
	LCD_DB5_PORT |= LCD_DB5;
  9e:	42 9a       	sbi	0x08, 2	; 8
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <_LCD_OutNibble+0x14>
	else
	LCD_DB5_PORT  &= ~LCD_DB5;
  a2:	42 98       	cbi	0x08, 2	; 8

	if(nibbleToWrite & 0x04)
  a4:	82 ff       	sbrs	r24, 2
  a6:	02 c0       	rjmp	.+4      	; 0xac <_LCD_OutNibble+0x1c>
	LCD_DB6_PORT |= LCD_DB6;
  a8:	43 9a       	sbi	0x08, 3	; 8
  aa:	01 c0       	rjmp	.+2      	; 0xae <_LCD_OutNibble+0x1e>
	else
	LCD_DB6_PORT  &= ~LCD_DB6;
  ac:	43 98       	cbi	0x08, 3	; 8

	if(nibbleToWrite & 0x08)
  ae:	83 ff       	sbrs	r24, 3
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <_LCD_OutNibble+0x26>
	LCD_DB7_PORT |= LCD_DB7;
  b2:	44 9a       	sbi	0x08, 4	; 8
  b4:	08 95       	ret
	else
	LCD_DB7_PORT  &= ~LCD_DB7;
  b6:	44 98       	cbi	0x08, 4	; 8
  b8:	08 95       	ret

000000ba <_LCD_Write>:
//
// Funkcja zapisu bajtu do wyœwietacza (bez rozró¿nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
  ba:	cf 93       	push	r28
  bc:	c8 2f       	mov	r28, r24
	LCD_E_PORT |= LCD_E;
  be:	5d 9a       	sbi	0x0b, 5	; 11
	_LCD_OutNibble(dataToWrite >> 4);
  c0:	82 95       	swap	r24
  c2:	8f 70       	andi	r24, 0x0F	; 15
  c4:	e5 df       	rcall	.-54     	; 0x90 <_LCD_OutNibble>
	LCD_E_PORT &= ~LCD_E;
  c6:	5d 98       	cbi	0x0b, 5	; 11
	LCD_E_PORT |= LCD_E;
  c8:	5d 9a       	sbi	0x0b, 5	; 11
	_LCD_OutNibble(dataToWrite);
  ca:	8c 2f       	mov	r24, r28
  cc:	e1 df       	rcall	.-62     	; 0x90 <_LCD_OutNibble>
	LCD_E_PORT &= ~LCD_E;
  ce:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f e9       	ldi	r18, 0x9F	; 159
  d2:	86 e8       	ldi	r24, 0x86	; 134
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <_LCD_Write+0x1c>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <_LCD_Write+0x26>
  e0:	00 00       	nop
	_delay_ms(500);
}
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <LCD_WriteCommand>:
// Funkcja zapisu rozkazu do wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
	LCD_RS_PORT &= ~LCD_RS;
  e6:	5c 98       	cbi	0x0b, 4	; 11
	_LCD_Write(commandToWrite);
  e8:	e8 cf       	rjmp	.-48     	; 0xba <_LCD_Write>
  ea:	08 95       	ret

000000ec <LCD_WriteData>:
// Funkcja zapisu danych do pamiêci wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
	LCD_RS_PORT |= LCD_RS;
  ec:	5c 9a       	sbi	0x0b, 4	; 11
	_LCD_Write(dataToWrite);
  ee:	e5 cf       	rjmp	.-54     	; 0xba <_LCD_Write>
  f0:	08 95       	ret

000000f2 <LCD_WriteText>:
//
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	ec 01       	movw	r28, r24
	while(*text)
  f8:	88 81       	ld	r24, Y
  fa:	88 23       	and	r24, r24
  fc:	29 f0       	breq	.+10     	; 0x108 <LCD_WriteText+0x16>
  fe:	21 96       	adiw	r28, 0x01	; 1
	LCD_WriteData(*text++);
 100:	f5 df       	rcall	.-22     	; 0xec <LCD_WriteData>
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
	while(*text)
 102:	89 91       	ld	r24, Y+
 104:	81 11       	cpse	r24, r1
 106:	fc cf       	rjmp	.-8      	; 0x100 <LCD_WriteText+0xe>
	LCD_WriteData(*text++);
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <LCD_GoTo>:
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
	LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 10e:	90 e4       	ldi	r25, 0x40	; 64
 110:	69 9f       	mul	r22, r25
 112:	80 0d       	add	r24, r0
 114:	11 24       	eor	r1, r1
 116:	80 68       	ori	r24, 0x80	; 128
 118:	e6 cf       	rjmp	.-52     	; 0xe6 <LCD_WriteCommand>
 11a:	08 95       	ret

0000011c <LCD_Clear>:
// Funkcja czyszczenia ekranu wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Clear(void)
{
	LCD_WriteCommand(HD44780_CLEAR);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	e3 df       	rcall	.-58     	; 0xe6 <LCD_WriteCommand>
 120:	83 ef       	ldi	r24, 0xF3	; 243
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_Clear+0x8>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_Clear+0xe>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <LCD_Home>:
// Funkcja przywrócenia pocz¹tkowych wspó³rzêdnych wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Home(void)
{
	LCD_WriteCommand(HD44780_HOME);
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	da df       	rcall	.-76     	; 0xe6 <LCD_WriteCommand>
 132:	83 ef       	ldi	r24, 0xF3	; 243
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_Home+0x8>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_Home+0xe>
 13c:	00 00       	nop
 13e:	08 95       	ret

00000140 <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 140:	cf 93       	push	r28
	unsigned char i;
	LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
 142:	39 9a       	sbi	0x07, 1	; 7
	LCD_DB5_DIR |= LCD_DB5; //
 144:	3a 9a       	sbi	0x07, 2	; 7
	LCD_DB6_DIR |= LCD_DB6; //
 146:	3b 9a       	sbi	0x07, 3	; 7
	LCD_DB7_DIR |= LCD_DB7; //
 148:	3c 9a       	sbi	0x07, 4	; 7
	LCD_E_DIR     |= LCD_E;   //
 14a:	55 9a       	sbi	0x0a, 5	; 10
	LCD_RS_DIR     |= LCD_RS;  //
 14c:	54 9a       	sbi	0x0a, 4	; 10
 14e:	85 ea       	ldi	r24, 0xA5	; 165
 150:	9e e0       	ldi	r25, 0x0E	; 14
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_Initalize+0x12>
 156:	00 c0       	rjmp	.+0      	; 0x158 <LCD_Initalize+0x18>
 158:	00 00       	nop
	_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
	LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 15a:	5c 98       	cbi	0x0b, 4	; 11
	LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 15c:	5d 98       	cbi	0x0b, 5	; 11
 15e:	c3 e0       	ldi	r28, 0x03	; 3

	for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
	{
		LCD_E_PORT |= LCD_E; //  E = 1
 160:	5d 9a       	sbi	0x0b, 5	; 11
		_LCD_OutNibble(0x03); // tryb 8-bitowy
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	95 df       	rcall	.-214    	; 0x90 <_LCD_OutNibble>
		LCD_E_PORT &= ~LCD_E; // E = 0
 166:	5d 98       	cbi	0x0b, 5	; 11
 168:	81 ee       	ldi	r24, 0xE1	; 225
 16a:	94 e0       	ldi	r25, 0x04	; 4
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Initalize+0x2c>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Initalize+0x32>
 172:	00 00       	nop
 174:	c1 50       	subi	r28, 0x01	; 1
	LCD_RS_DIR     |= LCD_RS;  //
	_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
	LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
	LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

	for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 176:	a1 f7       	brne	.-24     	; 0x160 <LCD_Initalize+0x20>
		_LCD_OutNibble(0x03); // tryb 8-bitowy
		LCD_E_PORT &= ~LCD_E; // E = 0
		_delay_ms(5); // czekaj 5ms
	}

	LCD_E_PORT |= LCD_E; // E = 1
 178:	5d 9a       	sbi	0x0b, 5	; 11
	_LCD_OutNibble(0x02); // tryb 4-bitowy
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	89 df       	rcall	.-238    	; 0x90 <_LCD_OutNibble>
	LCD_E_PORT &= ~LCD_E; // E = 0
 17e:	5d 98       	cbi	0x0b, 5	; 11
 180:	89 ef       	ldi	r24, 0xF9	; 249
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_Initalize+0x44>
 188:	00 c0       	rjmp	.+0      	; 0x18a <LCD_Initalize+0x4a>
 18a:	00 00       	nop

	_delay_ms(1); // czekaj 1ms
	LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 18c:	88 e2       	ldi	r24, 0x28	; 40
 18e:	ab df       	rcall	.-170    	; 0xe6 <LCD_WriteCommand>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
 190:	88 e0       	ldi	r24, 0x08	; 8
 192:	a9 df       	rcall	.-174    	; 0xe6 <LCD_WriteCommand>
	LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	a7 df       	rcall	.-178    	; 0xe6 <LCD_WriteCommand>
 198:	83 ef       	ldi	r24, 0xF3	; 243
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_Initalize+0x5c>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_Initalize+0x62>
 1a2:	00 00       	nop
	_delay_ms(2);
	LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 1a4:	86 e0       	ldi	r24, 0x06	; 6
 1a6:	9f df       	rcall	.-194    	; 0xe6 <LCD_WriteCommand>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 1a8:	8c e0       	ldi	r24, 0x0C	; 12
 1aa:	9d df       	rcall	.-198    	; 0xe6 <LCD_WriteCommand>
}
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void) 
{
	LCD_Initalize();
 1b0:	c7 df       	rcall	.-114    	; 0x140 <LCD_Initalize>
	LCD_Clear();
 1b2:	b4 df       	rcall	.-152    	; 0x11c <LCD_Clear>
	LCD_Home();
 1b4:	bc df       	rcall	.-136    	; 0x12e <LCD_Home>
	
	LCD_WriteText("Hello World");
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	9b df       	rcall	.-202    	; 0xf2 <LCD_WriteText>
	LCD_GoTo(3,1);
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	83 e0       	ldi	r24, 0x03	; 3
 1c0:	a6 df       	rcall	.-180    	; 0x10e <LCD_GoTo>
	LCD_WriteText("test");
 1c2:	8c e0       	ldi	r24, 0x0C	; 12
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	95 df       	rcall	.-214    	; 0xf2 <LCD_WriteText>
	
	while(1)
	{
		
	}
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <main+0x18>

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
