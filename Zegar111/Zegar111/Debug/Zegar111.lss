
Zegar111.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000003c0  00000454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800110  00800110  00000464  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000085a  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000024b  00000000  00000000  00000d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000509  00000000  00000000  00000fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  000014dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006d9b  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041e  00000000  00000000  00008383  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000087a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000004ef  00000000  00000000  000087e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	51 c1       	rjmp	.+674    	; 0x2d0 <__vector_11>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	70 d0       	rcall	.+224    	; 0x17c <main>
  9c:	8f c1       	rjmp	.+798    	; 0x3bc <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <LCD_send_command>:
}

/* This function sends a command 'cmnd' to the LCD module*/
void LCD_send_command(unsigned char cmnd)
{
	LCD_DATA_PORT = cmnd;
  a0:	88 b9       	out	0x08, r24	; 8
	
	LCD_CNTRL_PORT &= ~(1<<LCD_RS_PIN);
  a2:	5c 98       	cbi	0x0b, 4	; 11
	
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
  a4:	5d 9a       	sbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCD_send_command+0x8>
  ac:	00 c0       	rjmp	.+0      	; 0xae <LCD_send_command+0xe>
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
  ae:	5d 98       	cbi	0x0b, 5	; 11
  b0:	85 e8       	ldi	r24, 0x85	; 133
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_send_command+0x12>
  b6:	00 00       	nop
  b8:	08 95       	ret

000000ba <LCD_send_data>:
}

/* This function sends the data 'data' to the LCD module*/
void LCD_send_data(unsigned char data)
{
	LCD_DATA_PORT = data;
  ba:	88 b9       	out	0x08, r24	; 8
	
	LCD_CNTRL_PORT |= (1<<LCD_RS_PIN);
  bc:	5c 9a       	sbi	0x0b, 4	; 11
	
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
  be:	5d 9a       	sbi	0x0b, 5	; 11
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_send_data+0x8>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_send_data+0xe>
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
  c8:	5d 98       	cbi	0x0b, 5	; 11
  ca:	85 e8       	ldi	r24, 0x85	; 133
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_send_data+0x12>
  d0:	00 00       	nop
  d2:	08 95       	ret

000000d4 <LCD_init>:
	_delay_us(100);
}

void LCD_init()
{
	LCD_CNTRL_DDR = 0x30;
  d4:	80 e3       	ldi	r24, 0x30	; 48
  d6:	8a b9       	out	0x0a, r24	; 10
	LCD_CNTRL_PORT = 0xCF;
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	8b b9       	out	0x0b, r24	; 11
	LCD_DATA_DDR = 0x1E;
  dc:	8e e1       	ldi	r24, 0x1E	; 30
  de:	87 b9       	out	0x07, r24	; 7
	LCD_DATA_PORT = 0xE1;
  e0:	81 ee       	ldi	r24, 0xE1	; 225
  e2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	8f e0       	ldi	r24, 0x0F	; 15
  e6:	97 e2       	ldi	r25, 0x27	; 39
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_init+0x14>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_init+0x1a>
  ee:	00 00       	nop
	
	_delay_ms(10);
	LCD_send_command(0x38);
  f0:	88 e3       	ldi	r24, 0x38	; 56
  f2:	d6 df       	rcall	.-84     	; 0xa0 <LCD_send_command>
	LCD_send_command(0x0C);
  f4:	8c e0       	ldi	r24, 0x0C	; 12
  f6:	d4 df       	rcall	.-88     	; 0xa0 <LCD_send_command>
	LCD_send_command(0x01);
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	d2 df       	rcall	.-92     	; 0xa0 <LCD_send_command>
  fc:	8f e0       	ldi	r24, 0x0F	; 15
  fe:	97 e2       	ldi	r25, 0x27	; 39
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_init+0x2c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCD_init+0x32>
 106:	00 00       	nop
	_delay_ms(10);
	LCD_send_command(0x06);
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	ca cf       	rjmp	.-108    	; 0xa0 <LCD_send_command>
 10c:	08 95       	ret

0000010e <LCD_goto>:
}

/* This function moves the cursor the line y column x on the LCD module*/
void LCD_goto(unsigned char y, unsigned char x)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	00 d0       	rcall	.+0      	; 0x114 <LCD_goto+0x6>
 114:	00 d0       	rcall	.+0      	; 0x116 <LCD_goto+0x8>
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstAddress[] = {0x80,0xC0,0x94,0xD4};
 11a:	90 e8       	ldi	r25, 0x80	; 128
 11c:	99 83       	std	Y+1, r25	; 0x01
 11e:	90 ec       	ldi	r25, 0xC0	; 192
 120:	9a 83       	std	Y+2, r25	; 0x02
 122:	94 e9       	ldi	r25, 0x94	; 148
 124:	9b 83       	std	Y+3, r25	; 0x03
 126:	94 ed       	ldi	r25, 0xD4	; 212
 128:	9c 83       	std	Y+4, r25	; 0x04
 12a:	61 50       	subi	r22, 0x01	; 1
	
	LCD_send_command(firstAddress[y-1] + x-1);
 12c:	fe 01       	movw	r30, r28
 12e:	e8 0f       	add	r30, r24
 130:	f1 1d       	adc	r31, r1
 132:	80 81       	ld	r24, Z
 134:	86 0f       	add	r24, r22
 136:	b4 df       	rcall	.-152    	; 0xa0 <LCD_send_command>
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	97 e2       	ldi	r25, 0x27	; 39
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_goto+0x2e>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_goto+0x34>
 142:	00 00       	nop
	_delay_ms(10);
}
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <LCD_print>:

void LCD_print(char *string)
{
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	8c 01       	movw	r16, r24
	unsigned char i;
	
	while(string[i]!=0)
 15a:	c0 e0       	ldi	r28, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	80 81       	ld	r24, Z
 160:	88 23       	and	r24, r24
 162:	41 f0       	breq	.+16     	; 0x174 <LCD_print+0x22>
	{
		LCD_send_data(string[i]);
 164:	aa df       	rcall	.-172    	; 0xba <LCD_send_data>
		i++;
 166:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_print(char *string)
{
	unsigned char i;
	
	while(string[i]!=0)
 168:	f8 01       	movw	r30, r16
 16a:	ec 0f       	add	r30, r28
 16c:	f1 1d       	adc	r31, r1
 16e:	80 81       	ld	r24, Z
 170:	81 11       	cpse	r24, r1
 172:	f8 cf       	rjmp	.-16     	; 0x164 <LCD_print+0x12>
	{
		LCD_send_data(string[i]);
		i++;
	}
}
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <main>:

int main(void)
{
	unsigned char i;
	
	LCD_init();
 17c:	ab df       	rcall	.-170    	; 0xd4 <LCD_init>
	LCD_print("czas");
 17e:	89 e0       	ldi	r24, 0x09	; 9
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	e7 df       	rcall	.-50     	; 0x152 <LCD_print>
	LCD_goto(3,1);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	c2 df       	rcall	.-124    	; 0x10e <LCD_goto>
	LCD_print(time);
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	e1 df       	rcall	.-62     	; 0x152 <LCD_print>
	
	LCD_CNTRL_PORT = (1<<SET_HOUR | 1<<SET_MINUTE);
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	8b b9       	out	0x0b, r24	; 11
	
	TCCR1B = (1<<CS12|1<<WGM12);
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24
	OCR1A = 15625;
 19a:	89 e0       	ldi	r24, 0x09	; 9
 19c:	9d e3       	ldi	r25, 0x3D	; 61
 19e:	90 93 89 00 	sts	0x0089, r25
 1a2:	80 93 88 00 	sts	0x0088, r24
	TIMSK0 = 1<<OCIE1A;
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	80 93 6e 00 	sts	0x006E, r24
	sei();
 1ac:	78 94       	sei
	
	while(1)
	{
		if(!(LCD_CNTRL_PIN & (1<<SET_HOUR)))
 1ae:	48 99       	sbic	0x09, 0	; 9
 1b0:	0a c0       	rjmp	.+20     	; 0x1c6 <main+0x4a>
		{
			hours++;
 1b2:	80 91 12 01 	lds	r24, 0x0112
 1b6:	8f 5f       	subi	r24, 0xFF	; 255
			if(hours > 23)
 1b8:	88 31       	cpi	r24, 0x18	; 24
 1ba:	18 f4       	brcc	.+6      	; 0x1c2 <main+0x46>
	
	while(1)
	{
		if(!(LCD_CNTRL_PIN & (1<<SET_HOUR)))
		{
			hours++;
 1bc:	80 93 12 01 	sts	0x0112, r24
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <main+0x4a>
			if(hours > 23)
			hours = 0;
 1c2:	10 92 12 01 	sts	0x0112, r1
		}
		if(!(LCD_CNTRL_PIN & (1<<SET_MINUTE)))
 1c6:	49 99       	sbic	0x09, 1	; 9
 1c8:	f2 cf       	rjmp	.-28     	; 0x1ae <main+0x32>
		{
			minutes++;
 1ca:	80 91 11 01 	lds	r24, 0x0111
 1ce:	8f 5f       	subi	r24, 0xFF	; 255
 1d0:	80 93 11 01 	sts	0x0111, r24
			if(minutes > 59)
 1d4:	8c 33       	cpi	r24, 0x3C	; 60
 1d6:	58 f3       	brcs	.-42     	; 0x1ae <main+0x32>
			minutes = 0;
 1d8:	10 92 11 01 	sts	0x0111, r1
 1dc:	e8 cf       	rjmp	.-48     	; 0x1ae <main+0x32>

000001de <LCD_update_time>:
		LCD_send_data(string[i]);
		i++;
	}
}
void LCD_update_time()
{
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
	unsigned char temp;
	
	LCD_goto(2,4);
 1e4:	64 e0       	ldi	r22, 0x04	; 4
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	92 df       	rcall	.-220    	; 0x10e <LCD_goto>
	
	itoa(hours/10,temp,10);
 1ea:	00 e0       	ldi	r16, 0x00	; 0
 1ec:	10 e0       	ldi	r17, 0x00	; 0
 1ee:	80 91 12 01 	lds	r24, 0x0112
 1f2:	cd ec       	ldi	r28, 0xCD	; 205
 1f4:	8c 9f       	mul	r24, r28
 1f6:	81 2d       	mov	r24, r1
 1f8:	11 24       	eor	r1, r1
 1fa:	86 95       	lsr	r24
 1fc:	86 95       	lsr	r24
 1fe:	86 95       	lsr	r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 200:	4a e0       	ldi	r20, 0x0A	; 10
 202:	b8 01       	movw	r22, r16
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	a7 d0       	rcall	.+334    	; 0x356 <__itoa_ncheck>
	LCD_print(temp);
 208:	c8 01       	movw	r24, r16
 20a:	a3 df       	rcall	.-186    	; 0x152 <LCD_print>
	itoa(hours%10,temp,10);
 20c:	80 91 12 01 	lds	r24, 0x0112
 210:	8c 9f       	mul	r24, r28
 212:	91 2d       	mov	r25, r1
 214:	11 24       	eor	r1, r1
 216:	96 95       	lsr	r25
 218:	96 95       	lsr	r25
 21a:	96 95       	lsr	r25
 21c:	99 0f       	add	r25, r25
 21e:	29 2f       	mov	r18, r25
 220:	22 0f       	add	r18, r18
 222:	22 0f       	add	r18, r18
 224:	92 0f       	add	r25, r18
 226:	89 1b       	sub	r24, r25
 228:	4a e0       	ldi	r20, 0x0A	; 10
 22a:	b8 01       	movw	r22, r16
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	93 d0       	rcall	.+294    	; 0x356 <__itoa_ncheck>
	LCD_print(temp);
 230:	c8 01       	movw	r24, r16
 232:	8f df       	rcall	.-226    	; 0x152 <LCD_print>
	LCD_print(":");
 234:	8e e0       	ldi	r24, 0x0E	; 14
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	8c df       	rcall	.-232    	; 0x152 <LCD_print>
	
	itoa(minutes/10,temp,10);
 23a:	80 91 11 01 	lds	r24, 0x0111
 23e:	8c 9f       	mul	r24, r28
 240:	81 2d       	mov	r24, r1
 242:	11 24       	eor	r1, r1
 244:	86 95       	lsr	r24
 246:	86 95       	lsr	r24
 248:	86 95       	lsr	r24
 24a:	4a e0       	ldi	r20, 0x0A	; 10
 24c:	b8 01       	movw	r22, r16
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	82 d0       	rcall	.+260    	; 0x356 <__itoa_ncheck>
	LCD_print(temp);
 252:	c8 01       	movw	r24, r16
 254:	7e df       	rcall	.-260    	; 0x152 <LCD_print>
	itoa((minutes%10),temp,10);
 256:	80 91 11 01 	lds	r24, 0x0111
 25a:	8c 9f       	mul	r24, r28
 25c:	91 2d       	mov	r25, r1
 25e:	11 24       	eor	r1, r1
 260:	96 95       	lsr	r25
 262:	96 95       	lsr	r25
 264:	96 95       	lsr	r25
 266:	99 0f       	add	r25, r25
 268:	29 2f       	mov	r18, r25
 26a:	22 0f       	add	r18, r18
 26c:	22 0f       	add	r18, r18
 26e:	92 0f       	add	r25, r18
 270:	89 1b       	sub	r24, r25
 272:	4a e0       	ldi	r20, 0x0A	; 10
 274:	b8 01       	movw	r22, r16
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	6e d0       	rcall	.+220    	; 0x356 <__itoa_ncheck>
	LCD_print(temp);
 27a:	c8 01       	movw	r24, r16
 27c:	6a df       	rcall	.-300    	; 0x152 <LCD_print>
	LCD_print(":");
 27e:	8e e0       	ldi	r24, 0x0E	; 14
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	67 df       	rcall	.-306    	; 0x152 <LCD_print>
	
	itoa(seconds/10,temp,10);
 284:	80 91 10 01 	lds	r24, 0x0110
 288:	8c 9f       	mul	r24, r28
 28a:	81 2d       	mov	r24, r1
 28c:	11 24       	eor	r1, r1
 28e:	86 95       	lsr	r24
 290:	86 95       	lsr	r24
 292:	86 95       	lsr	r24
 294:	4a e0       	ldi	r20, 0x0A	; 10
 296:	b8 01       	movw	r22, r16
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	5d d0       	rcall	.+186    	; 0x356 <__itoa_ncheck>
	LCD_print(temp);
 29c:	c8 01       	movw	r24, r16
 29e:	59 df       	rcall	.-334    	; 0x152 <LCD_print>
	itoa(seconds%10,temp,10);
 2a0:	80 91 10 01 	lds	r24, 0x0110
 2a4:	8c 9f       	mul	r24, r28
 2a6:	c1 2d       	mov	r28, r1
 2a8:	11 24       	eor	r1, r1
 2aa:	c6 95       	lsr	r28
 2ac:	c6 95       	lsr	r28
 2ae:	c6 95       	lsr	r28
 2b0:	cc 0f       	add	r28, r28
 2b2:	9c 2f       	mov	r25, r28
 2b4:	99 0f       	add	r25, r25
 2b6:	99 0f       	add	r25, r25
 2b8:	c9 0f       	add	r28, r25
 2ba:	8c 1b       	sub	r24, r28
 2bc:	4a e0       	ldi	r20, 0x0A	; 10
 2be:	b8 01       	movw	r22, r16
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	49 d0       	rcall	.+146    	; 0x356 <__itoa_ncheck>
	LCD_print(temp);
 2c4:	c8 01       	movw	r24, r16
 2c6:	45 df       	rcall	.-374    	; 0x152 <LCD_print>
}
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	08 95       	ret

000002d0 <__vector_11>:
/*Timer Counter 1 Compare Match A Interrupt Service Routine/Interrupt Handler*/
ISR(TIMER1_COMPA_vect)
{
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
	seconds++;
 2f2:	80 91 10 01 	lds	r24, 0x0110
 2f6:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(seconds == 60)
 2f8:	8c 33       	cpi	r24, 0x3C	; 60
 2fa:	19 f0       	breq	.+6      	; 0x302 <__vector_11+0x32>
	LCD_print(temp);
}
/*Timer Counter 1 Compare Match A Interrupt Service Routine/Interrupt Handler*/
ISR(TIMER1_COMPA_vect)
{
	seconds++;
 2fc:	80 93 10 01 	sts	0x0110, r24
 300:	07 c0       	rjmp	.+14     	; 0x310 <__vector_11+0x40>
	
	if(seconds == 60)
	{
		seconds = 0;
 302:	10 92 10 01 	sts	0x0110, r1
		minutes++;
 306:	80 91 11 01 	lds	r24, 0x0111
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 11 01 	sts	0x0111, r24
	}
	if(minutes == 60)
 310:	80 91 11 01 	lds	r24, 0x0111
 314:	8c 33       	cpi	r24, 0x3C	; 60
 316:	39 f4       	brne	.+14     	; 0x326 <__vector_11+0x56>
	{
		minutes = 0;
 318:	10 92 11 01 	sts	0x0111, r1
		hours++;
 31c:	80 91 12 01 	lds	r24, 0x0112
 320:	8f 5f       	subi	r24, 0xFF	; 255
 322:	80 93 12 01 	sts	0x0112, r24
	}
	if(hours > 23)
 326:	80 91 12 01 	lds	r24, 0x0112
 32a:	88 31       	cpi	r24, 0x18	; 24
 32c:	10 f0       	brcs	.+4      	; 0x332 <__vector_11+0x62>
	hours = 0;
 32e:	10 92 12 01 	sts	0x0112, r1
	
	LCD_update_time();
 332:	55 df       	rcall	.-342    	; 0x1de <LCD_update_time>
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	bf 91       	pop	r27
 33a:	af 91       	pop	r26
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	7f 91       	pop	r23
 342:	6f 91       	pop	r22
 344:	5f 91       	pop	r21
 346:	4f 91       	pop	r20
 348:	3f 91       	pop	r19
 34a:	2f 91       	pop	r18
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <__itoa_ncheck>:
 356:	bb 27       	eor	r27, r27
 358:	4a 30       	cpi	r20, 0x0A	; 10
 35a:	31 f4       	brne	.+12     	; 0x368 <__itoa_ncheck+0x12>
 35c:	99 23       	and	r25, r25
 35e:	22 f4       	brpl	.+8      	; 0x368 <__itoa_ncheck+0x12>
 360:	bd e2       	ldi	r27, 0x2D	; 45
 362:	90 95       	com	r25
 364:	81 95       	neg	r24
 366:	9f 4f       	sbci	r25, 0xFF	; 255
 368:	01 c0       	rjmp	.+2      	; 0x36c <__utoa_common>

0000036a <__utoa_ncheck>:
 36a:	bb 27       	eor	r27, r27

0000036c <__utoa_common>:
 36c:	fb 01       	movw	r30, r22
 36e:	55 27       	eor	r21, r21
 370:	aa 27       	eor	r26, r26
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	aa 1f       	adc	r26, r26
 378:	a4 17       	cp	r26, r20
 37a:	10 f0       	brcs	.+4      	; 0x380 <__utoa_common+0x14>
 37c:	a4 1b       	sub	r26, r20
 37e:	83 95       	inc	r24
 380:	50 51       	subi	r21, 0x10	; 16
 382:	b9 f7       	brne	.-18     	; 0x372 <__utoa_common+0x6>
 384:	a0 5d       	subi	r26, 0xD0	; 208
 386:	aa 33       	cpi	r26, 0x3A	; 58
 388:	08 f0       	brcs	.+2      	; 0x38c <__utoa_common+0x20>
 38a:	a9 5d       	subi	r26, 0xD9	; 217
 38c:	a1 93       	st	Z+, r26
 38e:	00 97       	sbiw	r24, 0x00	; 0
 390:	79 f7       	brne	.-34     	; 0x370 <__utoa_common+0x4>
 392:	b1 11       	cpse	r27, r1
 394:	b1 93       	st	Z+, r27
 396:	11 92       	st	Z+, r1
 398:	cb 01       	movw	r24, r22
 39a:	00 c0       	rjmp	.+0      	; 0x39c <strrev>

0000039c <strrev>:
 39c:	dc 01       	movw	r26, r24
 39e:	fc 01       	movw	r30, r24
 3a0:	67 2f       	mov	r22, r23
 3a2:	71 91       	ld	r23, Z+
 3a4:	77 23       	and	r23, r23
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <strrev+0x4>
 3a8:	32 97       	sbiw	r30, 0x02	; 2
 3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <strrev+0x18>
 3ac:	7c 91       	ld	r23, X
 3ae:	6d 93       	st	X+, r22
 3b0:	70 83       	st	Z, r23
 3b2:	62 91       	ld	r22, -Z
 3b4:	ae 17       	cp	r26, r30
 3b6:	bf 07       	cpc	r27, r31
 3b8:	c8 f3       	brcs	.-14     	; 0x3ac <strrev+0x10>
 3ba:	08 95       	ret

000003bc <_exit>:
 3bc:	f8 94       	cli

000003be <__stop_program>:
 3be:	ff cf       	rjmp	.-2      	; 0x3be <__stop_program>
