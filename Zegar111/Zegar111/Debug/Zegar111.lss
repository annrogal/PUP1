
Zegar111.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000414  000004a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000414  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800110  00800110  000004b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000860  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000025b  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000510  00000000  00000000  0000103b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  0000154c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006d9a  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000035e  00000000  00000000  000083fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00008758  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000004ef  00000000  00000000  000087a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7b c1       	rjmp	.+758    	; 0x324 <__vector_11>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	75 d0       	rcall	.+234    	; 0x186 <main>
  9c:	b9 c1       	rjmp	.+882    	; 0x410 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <LCD_send_command>:
}

/* This function sends a command 'cmnd' to the LCD module*/
void LCD_send_command(unsigned char cmnd)
{
	LCD_DATA_PORT = cmnd;
  a0:	88 b9       	out	0x08, r24	; 8
	
	LCD_CNTRL_PORT &= ~(1<<LCD_RS_PIN);
  a2:	5c 98       	cbi	0x0b, 4	; 11
	
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
  a4:	5d 9a       	sbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8a e0       	ldi	r24, 0x0A	; 10
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCD_send_command+0x8>
  ac:	00 c0       	rjmp	.+0      	; 0xae <LCD_send_command+0xe>
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
  ae:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	8f e3       	ldi	r24, 0x3F	; 63
  b2:	9c e9       	ldi	r25, 0x9C	; 156
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_send_command+0x14>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_send_command+0x1a>
  ba:	00 00       	nop
  bc:	08 95       	ret

000000be <LCD_send_data>:
}

/* This function sends the data 'data' to the LCD module*/
void LCD_send_data(unsigned char data)
{
	LCD_DATA_PORT = data;
  be:	88 b9       	out	0x08, r24	; 8
	
	LCD_CNTRL_PORT |= (1<<LCD_RS_PIN);
  c0:	5c 9a       	sbi	0x0b, 4	; 11
	
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
  c2:	5d 9a       	sbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2a e0       	ldi	r18, 0x0A	; 10
  c6:	2a 95       	dec	r18
  c8:	f1 f7       	brne	.-4      	; 0xc6 <LCD_send_data+0x8>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <LCD_send_data+0xe>
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
  cc:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	93 ed       	ldi	r25, 0xD3	; 211
  d2:	20 e3       	ldi	r18, 0x30	; 48
  d4:	81 50       	subi	r24, 0x01	; 1
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	20 40       	sbci	r18, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <LCD_send_data+0x16>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_send_data+0x20>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <LCD_init>:
	_delay_ms(1000);
}

void LCD_init()
{
	LCD_CNTRL_DDR = 0x30;
  e2:	80 e3       	ldi	r24, 0x30	; 48
  e4:	8a b9       	out	0x0a, r24	; 10
	LCD_CNTRL_PORT = 0xCF;
  e6:	8f ec       	ldi	r24, 0xCF	; 207
  e8:	8b b9       	out	0x0b, r24	; 11
	LCD_DATA_DDR = 0x1E;
  ea:	8e e1       	ldi	r24, 0x1E	; 30
  ec:	87 b9       	out	0x07, r24	; 7
	LCD_DATA_PORT = 0xE1;
  ee:	81 ee       	ldi	r24, 0xE1	; 225
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	8f e3       	ldi	r24, 0x3F	; 63
  f4:	9c e9       	ldi	r25, 0x9C	; 156
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_init+0x14>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCD_init+0x1a>
  fc:	00 00       	nop
	
	_delay_ms(10);
	LCD_send_command(0x38);
  fe:	88 e3       	ldi	r24, 0x38	; 56
 100:	cf df       	rcall	.-98     	; 0xa0 <LCD_send_command>
	LCD_send_command(0x0C);
 102:	8c e0       	ldi	r24, 0x0C	; 12
 104:	cd df       	rcall	.-102    	; 0xa0 <LCD_send_command>
	LCD_send_command(0x01);
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	cb df       	rcall	.-106    	; 0xa0 <LCD_send_command>
 10a:	8f e3       	ldi	r24, 0x3F	; 63
 10c:	9c e9       	ldi	r25, 0x9C	; 156
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_init+0x2c>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCD_init+0x32>
 114:	00 00       	nop
	_delay_ms(10);
	LCD_send_command(0x06);
 116:	86 e0       	ldi	r24, 0x06	; 6
 118:	c3 cf       	rjmp	.-122    	; 0xa0 <LCD_send_command>
 11a:	08 95       	ret

0000011c <LCD_goto>:
}

/* This function moves the cursor the line y column x on the LCD module*/
void LCD_goto(unsigned char y, unsigned char x)
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	00 d0       	rcall	.+0      	; 0x122 <LCD_goto+0x6>
 122:	00 d0       	rcall	.+0      	; 0x124 <LCD_goto+0x8>
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstAddress[] = {0x80,0xC0,0x94,0xD4};
 128:	90 e8       	ldi	r25, 0x80	; 128
 12a:	99 83       	std	Y+1, r25	; 0x01
 12c:	90 ec       	ldi	r25, 0xC0	; 192
 12e:	9a 83       	std	Y+2, r25	; 0x02
 130:	94 e9       	ldi	r25, 0x94	; 148
 132:	9b 83       	std	Y+3, r25	; 0x03
 134:	94 ed       	ldi	r25, 0xD4	; 212
 136:	9c 83       	std	Y+4, r25	; 0x04
 138:	61 50       	subi	r22, 0x01	; 1
	
	LCD_send_command(firstAddress[y-1] + x-1);
 13a:	fe 01       	movw	r30, r28
 13c:	e8 0f       	add	r30, r24
 13e:	f1 1d       	adc	r31, r1
 140:	80 81       	ld	r24, Z
 142:	86 0f       	add	r24, r22
 144:	ad df       	rcall	.-166    	; 0xa0 <LCD_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	85 e3       	ldi	r24, 0x35	; 53
 148:	8a 95       	dec	r24
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_goto+0x2c>
 14c:	00 00       	nop
	_delay_us(10);
}
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <LCD_print>:

void LCD_print(char *string)
{
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	8c 01       	movw	r16, r24
	unsigned char i;
	
	while(string[i]!=0)
 164:	c0 e0       	ldi	r28, 0x00	; 0
 166:	fc 01       	movw	r30, r24
 168:	80 81       	ld	r24, Z
 16a:	88 23       	and	r24, r24
 16c:	41 f0       	breq	.+16     	; 0x17e <LCD_print+0x22>
	{
		LCD_send_data(string[i]);
 16e:	a7 df       	rcall	.-178    	; 0xbe <LCD_send_data>
		i++;
 170:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_print(char *string)
{
	unsigned char i;
	
	while(string[i]!=0)
 172:	f8 01       	movw	r30, r16
 174:	ec 0f       	add	r30, r28
 176:	f1 1d       	adc	r31, r1
 178:	80 81       	ld	r24, Z
 17a:	81 11       	cpse	r24, r1
 17c:	f8 cf       	rjmp	.-16     	; 0x16e <LCD_print+0x12>
	{
		LCD_send_data(string[i]);
		i++;
	}
}
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	08 95       	ret

00000186 <main>:

int main(void)
{
	unsigned char i;
	
	LCD_init();
 186:	ad df       	rcall	.-166    	; 0xe2 <LCD_init>
	LCD_print("czas");
 188:	89 e0       	ldi	r24, 0x09	; 9
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	e7 df       	rcall	.-50     	; 0x15c <LCD_print>
	LCD_goto(3,1);
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	c4 df       	rcall	.-120    	; 0x11c <LCD_goto>
	LCD_print(time);
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	e1 df       	rcall	.-62     	; 0x15c <LCD_print>
	
	LCD_CNTRL_PORT = (1<<SET_HOUR | 1<<SET_MINUTE);
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	8b b9       	out	0x0b, r24	; 11
	
	OCR1A = 15625;
 19e:	89 e0       	ldi	r24, 0x09	; 9
 1a0:	9d e3       	ldi	r25, 0x3D	; 61
 1a2:	90 93 89 00 	sts	0x0089, r25
 1a6:	80 93 88 00 	sts	0x0088, r24

	TCCR1B |= (1 << WGM12);
 1aa:	e1 e8       	ldi	r30, 0x81	; 129
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	88 60       	ori	r24, 0x08	; 8
 1b2:	80 83       	st	Z, r24
	// Mode 4, CTC on OCR1A

	TIMSK1 |= (1 << OCIE1A);
 1b4:	af e6       	ldi	r26, 0x6F	; 111
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	8c 91       	ld	r24, X
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	8c 93       	st	X, r24
	//Set interrupt on compare match

	TCCR1B |= (1 << CS12) | (1 << CS10);
 1be:	80 81       	ld	r24, Z
 1c0:	85 60       	ori	r24, 0x05	; 5
 1c2:	80 83       	st	Z, r24
	// set prescaler to 1024 and start the timer


	sei();
 1c4:	78 94       	sei
	// enable interrupts
	
	while(1)
	{
		if(!(LCD_CNTRL_PIN & (1<<SET_HOUR)))
 1c6:	48 99       	sbic	0x09, 0	; 9
 1c8:	0a c0       	rjmp	.+20     	; 0x1de <main+0x58>
		{
			hours++;
 1ca:	80 91 12 01 	lds	r24, 0x0112
 1ce:	8f 5f       	subi	r24, 0xFF	; 255
			if(hours > 23)
 1d0:	88 31       	cpi	r24, 0x18	; 24
 1d2:	18 f4       	brcc	.+6      	; 0x1da <main+0x54>
	
	while(1)
	{
		if(!(LCD_CNTRL_PIN & (1<<SET_HOUR)))
		{
			hours++;
 1d4:	80 93 12 01 	sts	0x0112, r24
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <main+0x58>
			if(hours > 23)
			hours = 0;
 1da:	10 92 12 01 	sts	0x0112, r1
		}
		if(!(LCD_CNTRL_PIN & (1<<SET_MINUTE)))
 1de:	49 99       	sbic	0x09, 1	; 9
 1e0:	f2 cf       	rjmp	.-28     	; 0x1c6 <main+0x40>
		{
			minutes++;
 1e2:	80 91 11 01 	lds	r24, 0x0111
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	80 93 11 01 	sts	0x0111, r24
			if(minutes > 59)
 1ec:	8c 33       	cpi	r24, 0x3C	; 60
 1ee:	58 f3       	brcs	.-42     	; 0x1c6 <main+0x40>
			minutes = 0;
 1f0:	10 92 11 01 	sts	0x0111, r1
 1f4:	e8 cf       	rjmp	.-48     	; 0x1c6 <main+0x40>

000001f6 <LCD_update_time>:
		LCD_send_data(string[i]);
		i++;
	}
}
void LCD_update_time()
{
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	a0 97       	sbiw	r28, 0x20	; 32
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	de bf       	out	0x3e, r29	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	cd bf       	out	0x3d, r28	; 61
	unsigned char temp[32];
	
	LCD_goto(2,4);
 20c:	64 e0       	ldi	r22, 0x04	; 4
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	85 df       	rcall	.-246    	; 0x11c <LCD_goto>
	
	itoa(hours/10,temp,10);
 212:	80 91 12 01 	lds	r24, 0x0112
 216:	1d ec       	ldi	r17, 0xCD	; 205
 218:	81 9f       	mul	r24, r17
 21a:	81 2d       	mov	r24, r1
 21c:	11 24       	eor	r1, r1
 21e:	86 95       	lsr	r24
 220:	86 95       	lsr	r24
 222:	86 95       	lsr	r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 224:	4a e0       	ldi	r20, 0x0A	; 10
 226:	be 01       	movw	r22, r28
 228:	6f 5f       	subi	r22, 0xFF	; 255
 22a:	7f 4f       	sbci	r23, 0xFF	; 255
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	bd d0       	rcall	.+378    	; 0x3aa <__itoa_ncheck>
	LCD_print(temp);
 230:	ce 01       	movw	r24, r28
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	93 df       	rcall	.-218    	; 0x15c <LCD_print>
	itoa(hours%10,temp,10);
 236:	80 91 12 01 	lds	r24, 0x0112
 23a:	81 9f       	mul	r24, r17
 23c:	91 2d       	mov	r25, r1
 23e:	11 24       	eor	r1, r1
 240:	96 95       	lsr	r25
 242:	96 95       	lsr	r25
 244:	96 95       	lsr	r25
 246:	99 0f       	add	r25, r25
 248:	29 2f       	mov	r18, r25
 24a:	22 0f       	add	r18, r18
 24c:	22 0f       	add	r18, r18
 24e:	92 0f       	add	r25, r18
 250:	89 1b       	sub	r24, r25
 252:	4a e0       	ldi	r20, 0x0A	; 10
 254:	be 01       	movw	r22, r28
 256:	6f 5f       	subi	r22, 0xFF	; 255
 258:	7f 4f       	sbci	r23, 0xFF	; 255
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	a6 d0       	rcall	.+332    	; 0x3aa <__itoa_ncheck>
	LCD_print(temp);
 25e:	ce 01       	movw	r24, r28
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	7c df       	rcall	.-264    	; 0x15c <LCD_print>
	LCD_print(":");
 264:	8e e0       	ldi	r24, 0x0E	; 14
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	79 df       	rcall	.-270    	; 0x15c <LCD_print>
	
	itoa(minutes/10,temp,10);
 26a:	80 91 11 01 	lds	r24, 0x0111
 26e:	81 9f       	mul	r24, r17
 270:	81 2d       	mov	r24, r1
 272:	11 24       	eor	r1, r1
 274:	86 95       	lsr	r24
 276:	86 95       	lsr	r24
 278:	86 95       	lsr	r24
 27a:	4a e0       	ldi	r20, 0x0A	; 10
 27c:	be 01       	movw	r22, r28
 27e:	6f 5f       	subi	r22, 0xFF	; 255
 280:	7f 4f       	sbci	r23, 0xFF	; 255
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	92 d0       	rcall	.+292    	; 0x3aa <__itoa_ncheck>
	LCD_print(temp);
 286:	ce 01       	movw	r24, r28
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	68 df       	rcall	.-304    	; 0x15c <LCD_print>
	itoa((minutes%10),temp,10);
 28c:	80 91 11 01 	lds	r24, 0x0111
 290:	81 9f       	mul	r24, r17
 292:	91 2d       	mov	r25, r1
 294:	11 24       	eor	r1, r1
 296:	96 95       	lsr	r25
 298:	96 95       	lsr	r25
 29a:	96 95       	lsr	r25
 29c:	99 0f       	add	r25, r25
 29e:	29 2f       	mov	r18, r25
 2a0:	22 0f       	add	r18, r18
 2a2:	22 0f       	add	r18, r18
 2a4:	92 0f       	add	r25, r18
 2a6:	89 1b       	sub	r24, r25
 2a8:	4a e0       	ldi	r20, 0x0A	; 10
 2aa:	be 01       	movw	r22, r28
 2ac:	6f 5f       	subi	r22, 0xFF	; 255
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	7b d0       	rcall	.+246    	; 0x3aa <__itoa_ncheck>
	LCD_print(temp);
 2b4:	ce 01       	movw	r24, r28
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	51 df       	rcall	.-350    	; 0x15c <LCD_print>
	LCD_print(":");
 2ba:	8e e0       	ldi	r24, 0x0E	; 14
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	4e df       	rcall	.-356    	; 0x15c <LCD_print>
	
	itoa(seconds/10,temp,10);
 2c0:	80 91 10 01 	lds	r24, 0x0110
 2c4:	81 9f       	mul	r24, r17
 2c6:	81 2d       	mov	r24, r1
 2c8:	11 24       	eor	r1, r1
 2ca:	86 95       	lsr	r24
 2cc:	86 95       	lsr	r24
 2ce:	86 95       	lsr	r24
 2d0:	4a e0       	ldi	r20, 0x0A	; 10
 2d2:	be 01       	movw	r22, r28
 2d4:	6f 5f       	subi	r22, 0xFF	; 255
 2d6:	7f 4f       	sbci	r23, 0xFF	; 255
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	67 d0       	rcall	.+206    	; 0x3aa <__itoa_ncheck>
	LCD_print(temp);
 2dc:	ce 01       	movw	r24, r28
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	3d df       	rcall	.-390    	; 0x15c <LCD_print>
	itoa(seconds%10,temp,10);
 2e2:	80 91 10 01 	lds	r24, 0x0110
 2e6:	81 9f       	mul	r24, r17
 2e8:	11 2d       	mov	r17, r1
 2ea:	11 24       	eor	r1, r1
 2ec:	16 95       	lsr	r17
 2ee:	16 95       	lsr	r17
 2f0:	16 95       	lsr	r17
 2f2:	11 0f       	add	r17, r17
 2f4:	91 2f       	mov	r25, r17
 2f6:	99 0f       	add	r25, r25
 2f8:	99 0f       	add	r25, r25
 2fa:	19 0f       	add	r17, r25
 2fc:	81 1b       	sub	r24, r17
 2fe:	4a e0       	ldi	r20, 0x0A	; 10
 300:	be 01       	movw	r22, r28
 302:	6f 5f       	subi	r22, 0xFF	; 255
 304:	7f 4f       	sbci	r23, 0xFF	; 255
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	50 d0       	rcall	.+160    	; 0x3aa <__itoa_ncheck>
	LCD_print(temp);
 30a:	ce 01       	movw	r24, r28
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	26 df       	rcall	.-436    	; 0x15c <LCD_print>
}
 310:	a0 96       	adiw	r28, 0x20	; 32
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	f8 94       	cli
 316:	de bf       	out	0x3e, r29	; 62
 318:	0f be       	out	0x3f, r0	; 63
 31a:	cd bf       	out	0x3d, r28	; 61
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	08 95       	ret

00000324 <__vector_11>:
/*Timer Counter 1 Compare Match A Interrupt Service Routine/Interrupt Handler*/
ISR(TIMER1_COMPA_vect)
{
 324:	1f 92       	push	r1
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	2f 93       	push	r18
 330:	3f 93       	push	r19
 332:	4f 93       	push	r20
 334:	5f 93       	push	r21
 336:	6f 93       	push	r22
 338:	7f 93       	push	r23
 33a:	8f 93       	push	r24
 33c:	9f 93       	push	r25
 33e:	af 93       	push	r26
 340:	bf 93       	push	r27
 342:	ef 93       	push	r30
 344:	ff 93       	push	r31
	seconds++;
 346:	80 91 10 01 	lds	r24, 0x0110
 34a:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(seconds == 60)
 34c:	8c 33       	cpi	r24, 0x3C	; 60
 34e:	19 f0       	breq	.+6      	; 0x356 <__vector_11+0x32>
	LCD_print(temp);
}
/*Timer Counter 1 Compare Match A Interrupt Service Routine/Interrupt Handler*/
ISR(TIMER1_COMPA_vect)
{
	seconds++;
 350:	80 93 10 01 	sts	0x0110, r24
 354:	07 c0       	rjmp	.+14     	; 0x364 <__vector_11+0x40>
	
	if(seconds == 60)
	{
		seconds = 0;
 356:	10 92 10 01 	sts	0x0110, r1
		minutes++;
 35a:	80 91 11 01 	lds	r24, 0x0111
 35e:	8f 5f       	subi	r24, 0xFF	; 255
 360:	80 93 11 01 	sts	0x0111, r24
	}
	if(minutes == 60)
 364:	80 91 11 01 	lds	r24, 0x0111
 368:	8c 33       	cpi	r24, 0x3C	; 60
 36a:	39 f4       	brne	.+14     	; 0x37a <__vector_11+0x56>
	{
		minutes = 0;
 36c:	10 92 11 01 	sts	0x0111, r1
		hours++;
 370:	80 91 12 01 	lds	r24, 0x0112
 374:	8f 5f       	subi	r24, 0xFF	; 255
 376:	80 93 12 01 	sts	0x0112, r24
	}
	if(hours > 23)
 37a:	80 91 12 01 	lds	r24, 0x0112
 37e:	88 31       	cpi	r24, 0x18	; 24
 380:	10 f0       	brcs	.+4      	; 0x386 <__vector_11+0x62>
	hours = 0;
 382:	10 92 12 01 	sts	0x0112, r1
	
	LCD_update_time();
 386:	37 df       	rcall	.-402    	; 0x1f6 <LCD_update_time>
 388:	ff 91       	pop	r31
 38a:	ef 91       	pop	r30
 38c:	bf 91       	pop	r27
 38e:	af 91       	pop	r26
 390:	9f 91       	pop	r25
 392:	8f 91       	pop	r24
 394:	7f 91       	pop	r23
 396:	6f 91       	pop	r22
 398:	5f 91       	pop	r21
 39a:	4f 91       	pop	r20
 39c:	3f 91       	pop	r19
 39e:	2f 91       	pop	r18
 3a0:	0f 90       	pop	r0
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <__itoa_ncheck>:
 3aa:	bb 27       	eor	r27, r27
 3ac:	4a 30       	cpi	r20, 0x0A	; 10
 3ae:	31 f4       	brne	.+12     	; 0x3bc <__itoa_ncheck+0x12>
 3b0:	99 23       	and	r25, r25
 3b2:	22 f4       	brpl	.+8      	; 0x3bc <__itoa_ncheck+0x12>
 3b4:	bd e2       	ldi	r27, 0x2D	; 45
 3b6:	90 95       	com	r25
 3b8:	81 95       	neg	r24
 3ba:	9f 4f       	sbci	r25, 0xFF	; 255
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <__utoa_common>

000003be <__utoa_ncheck>:
 3be:	bb 27       	eor	r27, r27

000003c0 <__utoa_common>:
 3c0:	fb 01       	movw	r30, r22
 3c2:	55 27       	eor	r21, r21
 3c4:	aa 27       	eor	r26, r26
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	aa 1f       	adc	r26, r26
 3cc:	a4 17       	cp	r26, r20
 3ce:	10 f0       	brcs	.+4      	; 0x3d4 <__utoa_common+0x14>
 3d0:	a4 1b       	sub	r26, r20
 3d2:	83 95       	inc	r24
 3d4:	50 51       	subi	r21, 0x10	; 16
 3d6:	b9 f7       	brne	.-18     	; 0x3c6 <__utoa_common+0x6>
 3d8:	a0 5d       	subi	r26, 0xD0	; 208
 3da:	aa 33       	cpi	r26, 0x3A	; 58
 3dc:	08 f0       	brcs	.+2      	; 0x3e0 <__utoa_common+0x20>
 3de:	a9 5d       	subi	r26, 0xD9	; 217
 3e0:	a1 93       	st	Z+, r26
 3e2:	00 97       	sbiw	r24, 0x00	; 0
 3e4:	79 f7       	brne	.-34     	; 0x3c4 <__utoa_common+0x4>
 3e6:	b1 11       	cpse	r27, r1
 3e8:	b1 93       	st	Z+, r27
 3ea:	11 92       	st	Z+, r1
 3ec:	cb 01       	movw	r24, r22
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <strrev>

000003f0 <strrev>:
 3f0:	dc 01       	movw	r26, r24
 3f2:	fc 01       	movw	r30, r24
 3f4:	67 2f       	mov	r22, r23
 3f6:	71 91       	ld	r23, Z+
 3f8:	77 23       	and	r23, r23
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <strrev+0x4>
 3fc:	32 97       	sbiw	r30, 0x02	; 2
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <strrev+0x18>
 400:	7c 91       	ld	r23, X
 402:	6d 93       	st	X+, r22
 404:	70 83       	st	Z, r23
 406:	62 91       	ld	r22, -Z
 408:	ae 17       	cp	r26, r30
 40a:	bf 07       	cpc	r27, r31
 40c:	c8 f3       	brcs	.-14     	; 0x400 <strrev+0x10>
 40e:	08 95       	ret

00000410 <_exit>:
 410:	f8 94       	cli

00000412 <__stop_program>:
 412:	ff cf       	rjmp	.-2      	; 0x412 <__stop_program>
