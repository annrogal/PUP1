
DiodaPrzycisk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000010e  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c5  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025f  00000000  00000000  0000036b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000063d5  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000069c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00000231  00000000  00000000  000069d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	02 d0       	rcall	.+4      	; 0x7a <main>
  76:	1b c0       	rjmp	.+54     	; 0xae <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <main>:
#define LED2 PD1
#define przycisk PC5

int main(void)
{
	DDRD|=(1<<LED1) | (1<<LED2);
  7a:	8a b1       	in	r24, 0x0a	; 10
  7c:	83 60       	ori	r24, 0x03	; 3
  7e:	8a b9       	out	0x0a, r24	; 10
	PORTD |=(1<<LED1);
  80:	58 9a       	sbi	0x0b, 0	; 11
	
	DDRC&=~(1<<przycisk);
  82:	3d 98       	cbi	0x07, 5	; 7
	PORTC|=(1<<przycisk);
  84:	45 9a       	sbi	0x08, 5	; 8
	
	 while (1) //Pêtla g³ówna
	 {
		 if(PINC & (1<<przycisk))//jeœli klawisz nie wciœniety
		 {
			 PORTD ^=(1<<LED1); //suma modulo 2 (XOR) stanu poprzedniego
  86:	21 e0       	ldi	r18, 0x01	; 1
			 //na porcie i pinu LED1 (zmiana stanu na przeciwny)
			 
			 PORTD ^=(1<<LED2); //suma modulo 2 (XOR) stanu poprzedniego na porcie
  88:	92 e0       	ldi	r25, 0x02	; 2
	DDRC&=~(1<<przycisk);
	PORTC|=(1<<przycisk);
	
	 while (1) //Pêtla g³ówna
	 {
		 if(PINC & (1<<przycisk))//jeœli klawisz nie wciœniety
  8a:	35 9b       	sbis	0x06, 5	; 6
  8c:	fe cf       	rjmp	.-4      	; 0x8a <main+0x10>
		 {
			 PORTD ^=(1<<LED1); //suma modulo 2 (XOR) stanu poprzedniego
  8e:	8b b1       	in	r24, 0x0b	; 11
  90:	82 27       	eor	r24, r18
  92:	8b b9       	out	0x0b, r24	; 11
			 //na porcie i pinu LED1 (zmiana stanu na przeciwny)
			 
			 PORTD ^=(1<<LED2); //suma modulo 2 (XOR) stanu poprzedniego na porcie
  94:	8b b1       	in	r24, 0x0b	; 11
  96:	89 27       	eor	r24, r25
  98:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	3f ef       	ldi	r19, 0xFF	; 255
  9c:	49 e6       	ldi	r20, 0x69	; 105
  9e:	88 e1       	ldi	r24, 0x18	; 24
  a0:	31 50       	subi	r19, 0x01	; 1
  a2:	40 40       	sbci	r20, 0x00	; 0
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x26>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x30>
  aa:	00 00       	nop
  ac:	ee cf       	rjmp	.-36     	; 0x8a <main+0x10>

000000ae <_exit>:
  ae:	f8 94       	cli

000000b0 <__stop_program>:
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <__stop_program>
