
ZegarProjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000038c  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800110  00800110  00000430  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac8  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000032a  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000819  00000000  00000000  00001322  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00001b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007183  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ab  00000000  00000000  00008e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000090c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000029a8  00000000  00000000  00009136  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c1       	rjmp	.+622    	; 0x29c <__vector_11>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	d2 d0       	rcall	.+420    	; 0x240 <main>
  9c:	75 c1       	rjmp	.+746    	; 0x388 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <_LCD_OutNibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	80 ff       	sbrs	r24, 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <_LCD_OutNibble+0x8>
  a4:	41 9a       	sbi	0x08, 1	; 8
  a6:	01 c0       	rjmp	.+2      	; 0xaa <_LCD_OutNibble+0xa>
  a8:	41 98       	cbi	0x08, 1	; 8
  aa:	81 ff       	sbrs	r24, 1
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <_LCD_OutNibble+0x12>
  ae:	42 9a       	sbi	0x08, 2	; 8
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <_LCD_OutNibble+0x14>
  b2:	42 98       	cbi	0x08, 2	; 8
  b4:	82 ff       	sbrs	r24, 2
  b6:	02 c0       	rjmp	.+4      	; 0xbc <_LCD_OutNibble+0x1c>
  b8:	43 9a       	sbi	0x08, 3	; 8
  ba:	01 c0       	rjmp	.+2      	; 0xbe <_LCD_OutNibble+0x1e>
  bc:	43 98       	cbi	0x08, 3	; 8
  be:	83 ff       	sbrs	r24, 3
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <_LCD_OutNibble+0x26>
  c2:	44 9a       	sbi	0x08, 4	; 8
  c4:	08 95       	ret
  c6:	44 98       	cbi	0x08, 4	; 8
  c8:	08 95       	ret

000000ca <_LCD_Write>:
  ca:	cf 93       	push	r28
  cc:	c8 2f       	mov	r28, r24
  ce:	5d 9a       	sbi	0x0b, 5	; 11
  d0:	82 95       	swap	r24
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	e5 df       	rcall	.-54     	; 0xa0 <_LCD_OutNibble>
  d6:	5d 98       	cbi	0x0b, 5	; 11
  d8:	5d 9a       	sbi	0x0b, 5	; 11
  da:	8c 2f       	mov	r24, r28
  dc:	e1 df       	rcall	.-62     	; 0xa0 <_LCD_OutNibble>
  de:	5d 98       	cbi	0x0b, 5	; 11
  e0:	86 ea       	ldi	r24, 0xA6	; 166
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <_LCD_Write+0x18>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <_LCD_Write+0x1e>
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <LCD_WriteCommand>:
  ec:	5c 98       	cbi	0x0b, 4	; 11
  ee:	ed cf       	rjmp	.-38     	; 0xca <_LCD_Write>
  f0:	08 95       	ret

000000f2 <LCD_WriteData>:
  f2:	5c 9a       	sbi	0x0b, 4	; 11
  f4:	ea cf       	rjmp	.-44     	; 0xca <_LCD_Write>
  f6:	08 95       	ret

000000f8 <LCD_WriteText>:
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	ec 01       	movw	r28, r24
  fe:	88 81       	ld	r24, Y
 100:	88 23       	and	r24, r24
 102:	29 f0       	breq	.+10     	; 0x10e <LCD_WriteText+0x16>
 104:	21 96       	adiw	r28, 0x01	; 1
 106:	f5 df       	rcall	.-22     	; 0xf2 <LCD_WriteData>
 108:	89 91       	ld	r24, Y+
 10a:	81 11       	cpse	r24, r1
 10c:	fc cf       	rjmp	.-8      	; 0x106 <LCD_WriteText+0xe>
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <LCD_GoTo>:
 114:	90 e4       	ldi	r25, 0x40	; 64
 116:	69 9f       	mul	r22, r25
 118:	80 0d       	add	r24, r0
 11a:	11 24       	eor	r1, r1
 11c:	80 68       	ori	r24, 0x80	; 128
 11e:	e6 cf       	rjmp	.-52     	; 0xec <LCD_WriteCommand>
 120:	08 95       	ret

00000122 <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 122:	cf 93       	push	r28
	unsigned char i;
	LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
 124:	39 9a       	sbi	0x07, 1	; 7
	LCD_DB5_DIR |= LCD_DB5; //
 126:	3a 9a       	sbi	0x07, 2	; 7
	LCD_DB6_DIR |= LCD_DB6; //
 128:	3b 9a       	sbi	0x07, 3	; 7
	LCD_DB7_DIR |= LCD_DB7; //
 12a:	3c 9a       	sbi	0x07, 4	; 7
	LCD_E_DIR     |= LCD_E;   //
 12c:	55 9a       	sbi	0x0a, 5	; 10
	LCD_RS_DIR     |= LCD_RS;  //
 12e:	54 9a       	sbi	0x0a, 4	; 10
 130:	85 ea       	ldi	r24, 0xA5	; 165
 132:	9e e0       	ldi	r25, 0x0E	; 14
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <LCD_Initalize+0x12>
 138:	00 c0       	rjmp	.+0      	; 0x13a <LCD_Initalize+0x18>
 13a:	00 00       	nop
	_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
	LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 13c:	5c 98       	cbi	0x0b, 4	; 11
	LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 13e:	5d 98       	cbi	0x0b, 5	; 11
 140:	c3 e0       	ldi	r28, 0x03	; 3

	for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
	{
		LCD_E_PORT |= LCD_E; //  E = 1
 142:	5d 9a       	sbi	0x0b, 5	; 11
		_LCD_OutNibble(0x03); // tryb 8-bitowy
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	ac df       	rcall	.-168    	; 0xa0 <_LCD_OutNibble>
		LCD_E_PORT &= ~LCD_E; // E = 0
 148:	5d 98       	cbi	0x0b, 5	; 11
 14a:	81 ee       	ldi	r24, 0xE1	; 225
 14c:	94 e0       	ldi	r25, 0x04	; 4
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_Initalize+0x2c>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_Initalize+0x32>
 154:	00 00       	nop
 156:	c1 50       	subi	r28, 0x01	; 1
	LCD_RS_DIR     |= LCD_RS;  //
	_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
	LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
	LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

	for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 158:	a1 f7       	brne	.-24     	; 0x142 <LCD_Initalize+0x20>
		_LCD_OutNibble(0x03); // tryb 8-bitowy
		LCD_E_PORT &= ~LCD_E; // E = 0
		_delay_ms(5); // czekaj 5ms
	}

	LCD_E_PORT |= LCD_E; // E = 1
 15a:	5d 9a       	sbi	0x0b, 5	; 11
	_LCD_OutNibble(0x02); // tryb 4-bitowy
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	a0 df       	rcall	.-192    	; 0xa0 <_LCD_OutNibble>
	LCD_E_PORT &= ~LCD_E; // E = 0
 160:	5d 98       	cbi	0x0b, 5	; 11
 162:	89 ef       	ldi	r24, 0xF9	; 249
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_Initalize+0x44>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_Initalize+0x4a>
 16c:	00 00       	nop

	_delay_ms(1); // czekaj 1ms
	LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 16e:	88 e2       	ldi	r24, 0x28	; 40
 170:	bd df       	rcall	.-134    	; 0xec <LCD_WriteCommand>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
 172:	88 e0       	ldi	r24, 0x08	; 8
 174:	bb df       	rcall	.-138    	; 0xec <LCD_WriteCommand>
	LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	b9 df       	rcall	.-142    	; 0xec <LCD_WriteCommand>
 17a:	83 ef       	ldi	r24, 0xF3	; 243
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <LCD_Initalize+0x5c>
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCD_Initalize+0x62>
 184:	00 00       	nop
	_delay_ms(2);
	LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	b1 df       	rcall	.-158    	; 0xec <LCD_WriteCommand>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 18a:	8c e0       	ldi	r24, 0x0C	; 12
 18c:	af df       	rcall	.-162    	; 0xec <LCD_WriteCommand>
}
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <LCD_Update_Time>:
void LCD_Update_Time()
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	a0 97       	sbiw	r28, 0x20	; 32
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
	LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 1a6:	81 ec       	ldi	r24, 0xC1	; 193
 1a8:	a1 df       	rcall	.-190    	; 0xec <LCD_WriteCommand>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1aa:	4a e0       	ldi	r20, 0x0A	; 10
 1ac:	be 01       	movw	r22, r28
 1ae:	6f 5f       	subi	r22, 0xFF	; 255
 1b0:	7f 4f       	sbci	r23, 0xFF	; 255
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	b5 d0       	rcall	.+362    	; 0x322 <__itoa_ncheck>
	unsigned char seconds = 0;
	
	LCD_GoTo(1,1);
	
	itoa(hours/10,bufor,10);
	LCD_WriteText(bufor);
 1b8:	ce 01       	movw	r24, r28
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	9d df       	rcall	.-198    	; 0xf8 <LCD_WriteText>
 1be:	4a e0       	ldi	r20, 0x0A	; 10
 1c0:	be 01       	movw	r22, r28
 1c2:	6f 5f       	subi	r22, 0xFF	; 255
 1c4:	7f 4f       	sbci	r23, 0xFF	; 255
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	ab d0       	rcall	.+342    	; 0x322 <__itoa_ncheck>
	itoa(hours%10,bufor,10);
	LCD_WriteText(bufor);
 1cc:	ce 01       	movw	r24, r28
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	93 df       	rcall	.-218    	; 0xf8 <LCD_WriteText>
	LCD_WriteText(":");
 1d2:	89 e0       	ldi	r24, 0x09	; 9
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	90 df       	rcall	.-224    	; 0xf8 <LCD_WriteText>
 1d8:	4a e0       	ldi	r20, 0x0A	; 10
 1da:	be 01       	movw	r22, r28
 1dc:	6f 5f       	subi	r22, 0xFF	; 255
 1de:	7f 4f       	sbci	r23, 0xFF	; 255
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	9e d0       	rcall	.+316    	; 0x322 <__itoa_ncheck>
	
	itoa(minutes/10,bufor,10);
	LCD_WriteText(bufor);
 1e6:	ce 01       	movw	r24, r28
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	86 df       	rcall	.-244    	; 0xf8 <LCD_WriteText>
 1ec:	4a e0       	ldi	r20, 0x0A	; 10
 1ee:	be 01       	movw	r22, r28
 1f0:	6f 5f       	subi	r22, 0xFF	; 255
 1f2:	7f 4f       	sbci	r23, 0xFF	; 255
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	94 d0       	rcall	.+296    	; 0x322 <__itoa_ncheck>
	itoa((minutes%10),bufor,10);
	LCD_WriteText(bufor);
 1fa:	ce 01       	movw	r24, r28
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	7c df       	rcall	.-264    	; 0xf8 <LCD_WriteText>
	LCD_WriteText(":");
 200:	89 e0       	ldi	r24, 0x09	; 9
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	79 df       	rcall	.-270    	; 0xf8 <LCD_WriteText>
 206:	4a e0       	ldi	r20, 0x0A	; 10
 208:	be 01       	movw	r22, r28
 20a:	6f 5f       	subi	r22, 0xFF	; 255
 20c:	7f 4f       	sbci	r23, 0xFF	; 255
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	87 d0       	rcall	.+270    	; 0x322 <__itoa_ncheck>
	
	itoa(seconds/10,bufor,10);
	LCD_WriteText(bufor);
 214:	ce 01       	movw	r24, r28
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	6f df       	rcall	.-290    	; 0xf8 <LCD_WriteText>
 21a:	4a e0       	ldi	r20, 0x0A	; 10
 21c:	be 01       	movw	r22, r28
 21e:	6f 5f       	subi	r22, 0xFF	; 255
 220:	7f 4f       	sbci	r23, 0xFF	; 255
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	7d d0       	rcall	.+250    	; 0x322 <__itoa_ncheck>
	itoa(seconds%10,bufor,10);
	LCD_WriteText(bufor);
 228:	ce 01       	movw	r24, r28
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	65 df       	rcall	.-310    	; 0xf8 <LCD_WriteText>
}
 22e:	a0 96       	adiw	r28, 0x20	; 32
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <main>:
#define SET_MINUTE	PB1
//ISR(TIMER1_COMPA_vect);

int main(void) //petla glowna
{
	DDRB=0x00;
 240:	14 b8       	out	0x04, r1	; 4
	PORTB=0x00;
 242:	15 b8       	out	0x05, r1	; 5
	LCD_Initalize();
 244:	6e df       	rcall	.-292    	; 0x122 <LCD_Initalize>
	LCD_WriteText("czas");
 246:	8b e0       	ldi	r24, 0x0B	; 11
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	56 df       	rcall	.-340    	; 0xf8 <LCD_WriteText>
	//######## konfiguracja timera ##############
	//TIMSK0 |= (1<<TOIE0);           //Przerwanie overflow (przepe³nienie timera)
	//TCCR0B |= (1<<CS02) | (1<<CS00); // ród³em CLK, preskaler 1024
	//TCNT0 = timer_start;//          //Pocz¹tkowa wartoæ licznika
	
	TCCR1B = ((1<<CS12) | (1<<CS10)| (1<<WGM12));
 24c:	8d e0       	ldi	r24, 0x0D	; 13
 24e:	80 93 81 00 	sts	0x0081, r24
	OCR1A = 15625;
 252:	89 e0       	ldi	r24, 0x09	; 9
 254:	9d e3       	ldi	r25, 0x3D	; 61
 256:	90 93 89 00 	sts	0x0089, r25
 25a:	80 93 88 00 	sts	0x0088, r24
	TIMSK0 = 1<<OCIE1A;
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	80 93 6e 00 	sts	0x006E, r24
	//###########################################
	sei();//Globalne uruchomienie przerwañ
 264:	78 94       	sei
	{
				
		if((1<<SET_HOUR))
		
		{
			hours++;
 266:	80 91 12 01 	lds	r24, 0x0112
 26a:	8f 5f       	subi	r24, 0xFF	; 255
			if(hours > 23)
 26c:	88 31       	cpi	r24, 0x18	; 24
 26e:	18 f4       	brcc	.+6      	; 0x276 <main+0x36>
	{
				
		if((1<<SET_HOUR))
		
		{
			hours++;
 270:	80 93 12 01 	sts	0x0112, r24
 274:	02 c0       	rjmp	.+4      	; 0x27a <main+0x3a>
			if(hours > 23)
			hours = 0;
 276:	10 92 12 01 	sts	0x0112, r1
		}
		if((1<<SET_MINUTE))
		
		{
			minutes++;
 27a:	80 91 11 01 	lds	r24, 0x0111
 27e:	8f 5f       	subi	r24, 0xFF	; 255
			if(minutes > 59)
 280:	8c 33       	cpi	r24, 0x3C	; 60
 282:	18 f4       	brcc	.+6      	; 0x28a <main+0x4a>
			hours = 0;
		}
		if((1<<SET_MINUTE))
		
		{
			minutes++;
 284:	80 93 11 01 	sts	0x0111, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <main+0x4e>
			if(minutes > 59)
			minutes = 0;
 28a:	10 92 11 01 	sts	0x0111, r1
		}
		LCD_GoTo(1,1);
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	40 df       	rcall	.-384    	; 0x114 <LCD_GoTo>
		LCD_WriteText(time);
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	2f df       	rcall	.-418    	; 0xf8 <LCD_WriteText>
	}
 29a:	e5 cf       	rjmp	.-54     	; 0x266 <main+0x26>

0000029c <__vector_11>:
	
}
	//############ Procedura obs³ugi przerwania od przepe³nienia timera ############

		ISR(TIMER1_COMPA_vect)
		{
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	2f 93       	push	r18
 2a8:	3f 93       	push	r19
 2aa:	4f 93       	push	r20
 2ac:	5f 93       	push	r21
 2ae:	6f 93       	push	r22
 2b0:	7f 93       	push	r23
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	af 93       	push	r26
 2b8:	bf 93       	push	r27
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
			seconds++;
 2be:	80 91 10 01 	lds	r24, 0x0110
 2c2:	8f 5f       	subi	r24, 0xFF	; 255
			
			if(seconds == 60)
 2c4:	8c 33       	cpi	r24, 0x3C	; 60
 2c6:	19 f0       	breq	.+6      	; 0x2ce <__vector_11+0x32>
}
	//############ Procedura obs³ugi przerwania od przepe³nienia timera ############

		ISR(TIMER1_COMPA_vect)
		{
			seconds++;
 2c8:	80 93 10 01 	sts	0x0110, r24
 2cc:	07 c0       	rjmp	.+14     	; 0x2dc <__vector_11+0x40>
			
			if(seconds == 60)
			{
				seconds = 0;
 2ce:	10 92 10 01 	sts	0x0110, r1
				minutes++;
 2d2:	80 91 11 01 	lds	r24, 0x0111
 2d6:	8f 5f       	subi	r24, 0xFF	; 255
 2d8:	80 93 11 01 	sts	0x0111, r24
			}
			if(minutes == 60)
 2dc:	80 91 11 01 	lds	r24, 0x0111
 2e0:	8c 33       	cpi	r24, 0x3C	; 60
 2e2:	39 f4       	brne	.+14     	; 0x2f2 <__vector_11+0x56>
			{
				minutes = 0;
 2e4:	10 92 11 01 	sts	0x0111, r1
				hours++;
 2e8:	80 91 12 01 	lds	r24, 0x0112
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	80 93 12 01 	sts	0x0112, r24
			}
			if(hours > 23)
 2f2:	80 91 12 01 	lds	r24, 0x0112
 2f6:	88 31       	cpi	r24, 0x18	; 24
 2f8:	10 f0       	brcs	.+4      	; 0x2fe <__vector_11+0x62>
			hours = 0;
 2fa:	10 92 12 01 	sts	0x0112, r1
			
			LCD_Update_Time();
 2fe:	49 df       	rcall	.-366    	; 0x192 <LCD_Update_Time>
				
		}
 300:	ff 91       	pop	r31
 302:	ef 91       	pop	r30
 304:	bf 91       	pop	r27
 306:	af 91       	pop	r26
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	7f 91       	pop	r23
 30e:	6f 91       	pop	r22
 310:	5f 91       	pop	r21
 312:	4f 91       	pop	r20
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <__itoa_ncheck>:
 322:	bb 27       	eor	r27, r27
 324:	4a 30       	cpi	r20, 0x0A	; 10
 326:	31 f4       	brne	.+12     	; 0x334 <__itoa_ncheck+0x12>
 328:	99 23       	and	r25, r25
 32a:	22 f4       	brpl	.+8      	; 0x334 <__itoa_ncheck+0x12>
 32c:	bd e2       	ldi	r27, 0x2D	; 45
 32e:	90 95       	com	r25
 330:	81 95       	neg	r24
 332:	9f 4f       	sbci	r25, 0xFF	; 255
 334:	01 c0       	rjmp	.+2      	; 0x338 <__utoa_common>

00000336 <__utoa_ncheck>:
 336:	bb 27       	eor	r27, r27

00000338 <__utoa_common>:
 338:	fb 01       	movw	r30, r22
 33a:	55 27       	eor	r21, r21
 33c:	aa 27       	eor	r26, r26
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	aa 1f       	adc	r26, r26
 344:	a4 17       	cp	r26, r20
 346:	10 f0       	brcs	.+4      	; 0x34c <__utoa_common+0x14>
 348:	a4 1b       	sub	r26, r20
 34a:	83 95       	inc	r24
 34c:	50 51       	subi	r21, 0x10	; 16
 34e:	b9 f7       	brne	.-18     	; 0x33e <__utoa_common+0x6>
 350:	a0 5d       	subi	r26, 0xD0	; 208
 352:	aa 33       	cpi	r26, 0x3A	; 58
 354:	08 f0       	brcs	.+2      	; 0x358 <__utoa_common+0x20>
 356:	a9 5d       	subi	r26, 0xD9	; 217
 358:	a1 93       	st	Z+, r26
 35a:	00 97       	sbiw	r24, 0x00	; 0
 35c:	79 f7       	brne	.-34     	; 0x33c <__utoa_common+0x4>
 35e:	b1 11       	cpse	r27, r1
 360:	b1 93       	st	Z+, r27
 362:	11 92       	st	Z+, r1
 364:	cb 01       	movw	r24, r22
 366:	00 c0       	rjmp	.+0      	; 0x368 <strrev>

00000368 <strrev>:
 368:	dc 01       	movw	r26, r24
 36a:	fc 01       	movw	r30, r24
 36c:	67 2f       	mov	r22, r23
 36e:	71 91       	ld	r23, Z+
 370:	77 23       	and	r23, r23
 372:	e1 f7       	brne	.-8      	; 0x36c <strrev+0x4>
 374:	32 97       	sbiw	r30, 0x02	; 2
 376:	04 c0       	rjmp	.+8      	; 0x380 <strrev+0x18>
 378:	7c 91       	ld	r23, X
 37a:	6d 93       	st	X+, r22
 37c:	70 83       	st	Z, r23
 37e:	62 91       	ld	r22, -Z
 380:	ae 17       	cp	r26, r30
 382:	bf 07       	cpc	r27, r31
 384:	c8 f3       	brcs	.-14     	; 0x378 <strrev+0x10>
 386:	08 95       	ret

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
