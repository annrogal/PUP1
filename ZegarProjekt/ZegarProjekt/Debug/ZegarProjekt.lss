
ZegarProjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000316  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000316  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  000003b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a5c  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000335  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d3  00000000  00000000  00001245  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000075ae  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000229  00000000  00000000  000090ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00009317  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002afb  00000000  00000000  00009387  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	28 c1       	rjmp	.+592    	; 0x27e <__vector_11>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	d0 d0       	rcall	.+416    	; 0x23c <main>
  9c:	3a c1       	rjmp	.+628    	; 0x312 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <_LCD_OutNibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	80 ff       	sbrs	r24, 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <_LCD_OutNibble+0x8>
  a4:	41 9a       	sbi	0x08, 1	; 8
  a6:	01 c0       	rjmp	.+2      	; 0xaa <_LCD_OutNibble+0xa>
  a8:	41 98       	cbi	0x08, 1	; 8
  aa:	81 ff       	sbrs	r24, 1
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <_LCD_OutNibble+0x12>
  ae:	42 9a       	sbi	0x08, 2	; 8
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <_LCD_OutNibble+0x14>
  b2:	42 98       	cbi	0x08, 2	; 8
  b4:	82 ff       	sbrs	r24, 2
  b6:	02 c0       	rjmp	.+4      	; 0xbc <_LCD_OutNibble+0x1c>
  b8:	43 9a       	sbi	0x08, 3	; 8
  ba:	01 c0       	rjmp	.+2      	; 0xbe <_LCD_OutNibble+0x1e>
  bc:	43 98       	cbi	0x08, 3	; 8
  be:	83 ff       	sbrs	r24, 3
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <_LCD_OutNibble+0x26>
  c2:	44 9a       	sbi	0x08, 4	; 8
  c4:	08 95       	ret
  c6:	44 98       	cbi	0x08, 4	; 8
  c8:	08 95       	ret

000000ca <_LCD_Write>:
  ca:	cf 93       	push	r28
  cc:	c8 2f       	mov	r28, r24
  ce:	5d 9a       	sbi	0x0b, 5	; 11
  d0:	82 95       	swap	r24
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	e5 df       	rcall	.-54     	; 0xa0 <_LCD_OutNibble>
  d6:	5d 98       	cbi	0x0b, 5	; 11
  d8:	5d 9a       	sbi	0x0b, 5	; 11
  da:	8c 2f       	mov	r24, r28
  dc:	e1 df       	rcall	.-62     	; 0xa0 <_LCD_OutNibble>
  de:	5d 98       	cbi	0x0b, 5	; 11
  e0:	2f e9       	ldi	r18, 0x9F	; 159
  e2:	86 e8       	ldi	r24, 0x86	; 134
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <_LCD_Write+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <_LCD_Write+0x26>
  f0:	00 00       	nop
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <LCD_WriteCommand>:
  f6:	5c 98       	cbi	0x0b, 4	; 11
  f8:	e8 cf       	rjmp	.-48     	; 0xca <_LCD_Write>
  fa:	08 95       	ret

000000fc <LCD_WriteData>:
  fc:	5c 9a       	sbi	0x0b, 4	; 11
  fe:	e5 cf       	rjmp	.-54     	; 0xca <_LCD_Write>
 100:	08 95       	ret

00000102 <LCD_WriteText>:
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	ec 01       	movw	r28, r24
 108:	88 81       	ld	r24, Y
 10a:	88 23       	and	r24, r24
 10c:	29 f0       	breq	.+10     	; 0x118 <LCD_WriteText+0x16>
 10e:	21 96       	adiw	r28, 0x01	; 1
 110:	f5 df       	rcall	.-22     	; 0xfc <LCD_WriteData>
 112:	89 91       	ld	r24, Y+
 114:	81 11       	cpse	r24, r1
 116:	fc cf       	rjmp	.-8      	; 0x110 <LCD_WriteText+0xe>
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 11e:	cf 93       	push	r28
	unsigned char i;
	LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
 120:	39 9a       	sbi	0x07, 1	; 7
	LCD_DB5_DIR |= LCD_DB5; //
 122:	3a 9a       	sbi	0x07, 2	; 7
	LCD_DB6_DIR |= LCD_DB6; //
 124:	3b 9a       	sbi	0x07, 3	; 7
	LCD_DB7_DIR |= LCD_DB7; //
 126:	3c 9a       	sbi	0x07, 4	; 7
	LCD_E_DIR     |= LCD_E;   //
 128:	55 9a       	sbi	0x0a, 5	; 10
	LCD_RS_DIR     |= LCD_RS;  //
 12a:	54 9a       	sbi	0x0a, 4	; 10
 12c:	89 ef       	ldi	r24, 0xF9	; 249
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_Initalize+0x12>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_Initalize+0x18>
 136:	00 00       	nop
	_delay_ms(1); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
	LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 138:	5c 98       	cbi	0x0b, 4	; 11
	LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 13a:	5d 98       	cbi	0x0b, 5	; 11
 13c:	c3 e0       	ldi	r28, 0x03	; 3

	for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
	{
		LCD_E_PORT |= LCD_E; //  E = 1
 13e:	5d 9a       	sbi	0x0b, 5	; 11
		_LCD_OutNibble(0x03); // tryb 8-bitowy
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	ae df       	rcall	.-164    	; 0xa0 <_LCD_OutNibble>
		LCD_E_PORT &= ~LCD_E; // E = 0
 144:	5d 98       	cbi	0x0b, 5	; 11
 146:	89 ef       	ldi	r24, 0xF9	; 249
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_Initalize+0x2c>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_Initalize+0x32>
 150:	00 00       	nop
 152:	c1 50       	subi	r28, 0x01	; 1
	LCD_RS_DIR     |= LCD_RS;  //
	_delay_ms(1); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
	LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
	LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

	for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 154:	a1 f7       	brne	.-24     	; 0x13e <LCD_Initalize+0x20>
		_LCD_OutNibble(0x03); // tryb 8-bitowy
		LCD_E_PORT &= ~LCD_E; // E = 0
		_delay_ms(1); // czekaj 5ms
	}

	LCD_E_PORT |= LCD_E; // E = 1
 156:	5d 9a       	sbi	0x0b, 5	; 11
	_LCD_OutNibble(0x02); // tryb 4-bitowy
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	a2 df       	rcall	.-188    	; 0xa0 <_LCD_OutNibble>
	LCD_E_PORT &= ~LCD_E; // E = 0
 15c:	5d 98       	cbi	0x0b, 5	; 11
 15e:	89 ef       	ldi	r24, 0xF9	; 249
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_Initalize+0x44>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_Initalize+0x4a>
 168:	00 00       	nop

	_delay_ms(1); // czekaj 1ms
	LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 16a:	88 e2       	ldi	r24, 0x28	; 40
 16c:	c4 df       	rcall	.-120    	; 0xf6 <LCD_WriteCommand>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
 16e:	88 e0       	ldi	r24, 0x08	; 8
 170:	c2 df       	rcall	.-124    	; 0xf6 <LCD_WriteCommand>
	LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	c0 df       	rcall	.-128    	; 0xf6 <LCD_WriteCommand>
 176:	83 ef       	ldi	r24, 0xF3	; 243
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_Initalize+0x5c>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <LCD_Initalize+0x62>
 180:	00 00       	nop
	_delay_ms(2);
	LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	b8 df       	rcall	.-144    	; 0xf6 <LCD_WriteCommand>
	LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 186:	8c e0       	ldi	r24, 0x0C	; 12
 188:	b6 df       	rcall	.-148    	; 0xf6 <LCD_WriteCommand>
}
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <LCD_Update_Time>:
void LCD_Update_Time()
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	a0 97       	sbiw	r28, 0x20	; 32
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	f8 94       	cli
 19c:	de bf       	out	0x3e, r29	; 62
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	cd bf       	out	0x3d, r28	; 61
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
	LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 1a2:	80 ec       	ldi	r24, 0xC0	; 192
 1a4:	a8 df       	rcall	.-176    	; 0xf6 <LCD_WriteCommand>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1a6:	4a e0       	ldi	r20, 0x0A	; 10
 1a8:	be 01       	movw	r22, r28
 1aa:	6f 5f       	subi	r22, 0xFF	; 255
 1ac:	7f 4f       	sbci	r23, 0xFF	; 255
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	7c d0       	rcall	.+248    	; 0x2ac <__itoa_ncheck>
	unsigned char seconds = 0;
	
	LCD_GoTo(0,1);
	
	itoa(hours/10,a,10);
	LCD_WriteText(a);
 1b4:	ce 01       	movw	r24, r28
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	a4 df       	rcall	.-184    	; 0x102 <LCD_WriteText>
 1ba:	4a e0       	ldi	r20, 0x0A	; 10
 1bc:	be 01       	movw	r22, r28
 1be:	6f 5f       	subi	r22, 0xFF	; 255
 1c0:	7f 4f       	sbci	r23, 0xFF	; 255
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	72 d0       	rcall	.+228    	; 0x2ac <__itoa_ncheck>
	itoa(hours%10,a,10);
	LCD_WriteText(a);
 1c8:	ce 01       	movw	r24, r28
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	9a df       	rcall	.-204    	; 0x102 <LCD_WriteText>
	LCD_WriteText(":");
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	97 df       	rcall	.-210    	; 0x102 <LCD_WriteText>
 1d4:	4a e0       	ldi	r20, 0x0A	; 10
 1d6:	be 01       	movw	r22, r28
 1d8:	6f 5f       	subi	r22, 0xFF	; 255
 1da:	7f 4f       	sbci	r23, 0xFF	; 255
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	65 d0       	rcall	.+202    	; 0x2ac <__itoa_ncheck>
	
	itoa(minutes/10,a,10);
	LCD_WriteText(a);
 1e2:	ce 01       	movw	r24, r28
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	8d df       	rcall	.-230    	; 0x102 <LCD_WriteText>
 1e8:	4a e0       	ldi	r20, 0x0A	; 10
 1ea:	be 01       	movw	r22, r28
 1ec:	6f 5f       	subi	r22, 0xFF	; 255
 1ee:	7f 4f       	sbci	r23, 0xFF	; 255
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	5b d0       	rcall	.+182    	; 0x2ac <__itoa_ncheck>
	itoa((minutes%10),a,10);
	LCD_WriteText(a);
 1f6:	ce 01       	movw	r24, r28
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	83 df       	rcall	.-250    	; 0x102 <LCD_WriteText>
	LCD_WriteText(":");
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	80 df       	rcall	.-256    	; 0x102 <LCD_WriteText>
 202:	4a e0       	ldi	r20, 0x0A	; 10
 204:	be 01       	movw	r22, r28
 206:	6f 5f       	subi	r22, 0xFF	; 255
 208:	7f 4f       	sbci	r23, 0xFF	; 255
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	4e d0       	rcall	.+156    	; 0x2ac <__itoa_ncheck>
	
	itoa(seconds/10,a,10);
	LCD_WriteText(a);
 210:	ce 01       	movw	r24, r28
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	76 df       	rcall	.-276    	; 0x102 <LCD_WriteText>
 216:	4a e0       	ldi	r20, 0x0A	; 10
 218:	be 01       	movw	r22, r28
 21a:	6f 5f       	subi	r22, 0xFF	; 255
 21c:	7f 4f       	sbci	r23, 0xFF	; 255
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	44 d0       	rcall	.+136    	; 0x2ac <__itoa_ncheck>
	itoa(seconds%10,a,10);
	LCD_WriteText(a);
 224:	ce 01       	movw	r24, r28
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	6c df       	rcall	.-296    	; 0x102 <LCD_WriteText>
}
 22a:	a0 96       	adiw	r28, 0x20	; 32
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	f8 94       	cli
 230:	de bf       	out	0x3e, r29	; 62
 232:	0f be       	out	0x3f, r0	; 63
 234:	cd bf       	out	0x3d, r28	; 61
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <main>:
unsigned int rtc_sec=0;            //zmienne globalne


int main(void) //petla glowna
{
	LCD_Initalize();
 23c:	70 df       	rcall	.-288    	; 0x11e <LCD_Initalize>
	LCD_WriteText("czas");
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	5f df       	rcall	.-322    	; 0x102 <LCD_WriteText>
	
	DDRB=0b11111100;
 244:	8c ef       	ldi	r24, 0xFC	; 252
 246:	84 b9       	out	0x04, r24	; 4
	PORTB=0b00000011;
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	85 b9       	out	0x05, r24	; 5

rtc_init();
	sei();
	// enable interrupts
}
LCD_Update_Time();	
 24c:	a0 df       	rcall	.-192    	; 0x18e <LCD_Update_Time>
while(1)
{
	
	if(SET_HOUR)
 24e:	18 99       	sbic	0x03, 0	; 3
 250:	0a c0       	rjmp	.+20     	; 0x266 <main+0x2a>
	
	{
		hours++;
 252:	80 91 0b 01 	lds	r24, 0x010B
 256:	8f 5f       	subi	r24, 0xFF	; 255
		if(hours > 23)
 258:	88 31       	cpi	r24, 0x18	; 24
 25a:	18 f4       	brcc	.+6      	; 0x262 <main+0x26>
{
	
	if(SET_HOUR)
	
	{
		hours++;
 25c:	80 93 0b 01 	sts	0x010B, r24
 260:	02 c0       	rjmp	.+4      	; 0x266 <main+0x2a>
		if(hours > 23)
		hours = 0;
 262:	10 92 0b 01 	sts	0x010B, r1
		
	}
	if(SET_MINUTE)
 266:	19 99       	sbic	0x03, 1	; 3
 268:	f2 cf       	rjmp	.-28     	; 0x24e <main+0x12>
	
	{
		minutes++;
 26a:	80 91 0a 01 	lds	r24, 0x010A
 26e:	8f 5f       	subi	r24, 0xFF	; 255
 270:	80 93 0a 01 	sts	0x010A, r24
		if(minutes > 59)
 274:	8c 33       	cpi	r24, 0x3C	; 60
 276:	58 f3       	brcs	.-42     	; 0x24e <main+0x12>
		minutes = 0;
 278:	10 92 0a 01 	sts	0x010A, r1
 27c:	e8 cf       	rjmp	.-48     	; 0x24e <main+0x12>

0000027e <__vector_11>:
		
}
//############ Procedura obs³ugi przerwania od przepe³nienia timera ############

ISR(TIMER1_COMPA_vect)
{
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
++rtc_sec; 	
 28c:	80 91 08 01 	lds	r24, 0x0108
 290:	90 91 09 01 	lds	r25, 0x0109
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	90 93 09 01 	sts	0x0109, r25
 29a:	80 93 08 01 	sts	0x0108, r24
}
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <__itoa_ncheck>:
 2ac:	bb 27       	eor	r27, r27
 2ae:	4a 30       	cpi	r20, 0x0A	; 10
 2b0:	31 f4       	brne	.+12     	; 0x2be <__itoa_ncheck+0x12>
 2b2:	99 23       	and	r25, r25
 2b4:	22 f4       	brpl	.+8      	; 0x2be <__itoa_ncheck+0x12>
 2b6:	bd e2       	ldi	r27, 0x2D	; 45
 2b8:	90 95       	com	r25
 2ba:	81 95       	neg	r24
 2bc:	9f 4f       	sbci	r25, 0xFF	; 255
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <__utoa_common>

000002c0 <__utoa_ncheck>:
 2c0:	bb 27       	eor	r27, r27

000002c2 <__utoa_common>:
 2c2:	fb 01       	movw	r30, r22
 2c4:	55 27       	eor	r21, r21
 2c6:	aa 27       	eor	r26, r26
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	aa 1f       	adc	r26, r26
 2ce:	a4 17       	cp	r26, r20
 2d0:	10 f0       	brcs	.+4      	; 0x2d6 <__utoa_common+0x14>
 2d2:	a4 1b       	sub	r26, r20
 2d4:	83 95       	inc	r24
 2d6:	50 51       	subi	r21, 0x10	; 16
 2d8:	b9 f7       	brne	.-18     	; 0x2c8 <__utoa_common+0x6>
 2da:	a0 5d       	subi	r26, 0xD0	; 208
 2dc:	aa 33       	cpi	r26, 0x3A	; 58
 2de:	08 f0       	brcs	.+2      	; 0x2e2 <__utoa_common+0x20>
 2e0:	a9 5d       	subi	r26, 0xD9	; 217
 2e2:	a1 93       	st	Z+, r26
 2e4:	00 97       	sbiw	r24, 0x00	; 0
 2e6:	79 f7       	brne	.-34     	; 0x2c6 <__utoa_common+0x4>
 2e8:	b1 11       	cpse	r27, r1
 2ea:	b1 93       	st	Z+, r27
 2ec:	11 92       	st	Z+, r1
 2ee:	cb 01       	movw	r24, r22
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <strrev>

000002f2 <strrev>:
 2f2:	dc 01       	movw	r26, r24
 2f4:	fc 01       	movw	r30, r24
 2f6:	67 2f       	mov	r22, r23
 2f8:	71 91       	ld	r23, Z+
 2fa:	77 23       	and	r23, r23
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <strrev+0x4>
 2fe:	32 97       	sbiw	r30, 0x02	; 2
 300:	04 c0       	rjmp	.+8      	; 0x30a <strrev+0x18>
 302:	7c 91       	ld	r23, X
 304:	6d 93       	st	X+, r22
 306:	70 83       	st	Z, r23
 308:	62 91       	ld	r22, -Z
 30a:	ae 17       	cp	r26, r30
 30c:	bf 07       	cpc	r27, r31
 30e:	c8 f3       	brcs	.-14     	; 0x302 <strrev+0x10>
 310:	08 95       	ret

00000312 <_exit>:
 312:	f8 94       	cli

00000314 <__stop_program>:
 314:	ff cf       	rjmp	.-2      	; 0x314 <__stop_program>
